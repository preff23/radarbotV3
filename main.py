import asyncio
import os
import signal
import sys
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from bot.core.config import config
from bot.core.logging import setup_logging, get_logger
from bot.core.db import create_tables, db_manager
from bot.handlers.portfolio import portfolio_handler
from bot.handlers.analysis import analysis_handler
from bot.handlers.invest_analyst import invest_analyst
from bot.utils.onboarding import send_main_menu, request_phone_number, handle_contact
from bot.core.error_handler import handle_error, ErrorSeverity, ErrorCategory, ErrorContext, safe_execute_async

setup_logging()
logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"Received signal {signum}, shutting down gracefully...")
    if application:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            asyncio.create_task(application.stop())
            asyncio.create_task(application.shutdown())
            logger.info("Application stopped gracefully")
        except Exception as e:
            logger.error(f"Error during graceful shutdown: {e}")
    sys.exit(0)

async def graceful_shutdown():
    """Graceful shutdown –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting graceful shutdown...")
    try:
        if application:
            await application.stop()
            await application.shutdown()
        logger.info("Graceful shutdown completed")
    except Exception as e:
        logger.error(f"Error during graceful shutdown: {e}")


async def start_command(update, context):
    error_context = ErrorContext(
        user_id=str(update.effective_user.id) if update.effective_user else None,
        operation="start_command"
    )
    
    try:
        user = update.effective_user

        db_user = db_manager.get_user_by_telegram_id(user.id)

        if not db_user or not getattr(db_user, "phone_number", None):
            await request_phone_number(update, context)
            return

        context.user_data['awaiting_phone'] = False
        await send_main_menu(context, update.effective_chat.id, user)

    except Exception as e:
        error_info = handle_error(
            e,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.TELEGRAM,
            context=error_context
        )
        
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
        except Exception as send_error:
            handle_error(
                send_error,
                severity=ErrorSeverity.MEDIUM,
                category=ErrorCategory.TELEGRAM,
                context=error_context
            )


async def help_command(update, context):
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ RadarBot 3.0**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/portfolio - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
/analysis - –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
/app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**

1. **–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏:**
   - üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
   - üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –≤—Ä—É—á–Ω—É—é

2. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑:**
   - –ù–∞–∂–º–∏—Ç–µ "üìä –ê–Ω–∞–ª–∏–∑"
   - –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
- –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±—Ä–æ–∫–µ—Ä–æ–≤
- –í—ã–ø–∏—Å–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
- T-Bank Invest API (–æ—Å–Ω–æ–≤–Ω–æ–π)
- MOEX ISS API (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
- RBC –∏ Smart-Lab –Ω–æ–≤–æ—Å—Ç–∏

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
- –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
- –î–∞–Ω–Ω—ã–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞—â–∏—â–µ–Ω—ã
- –ù–∏–∫–∞–∫–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Altman

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def app_command(update, context):
    try:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        message = """
üì± **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Radar**

–û—Ç–∫—Ä–æ–π—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º:

‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
‚Ä¢ üìä –ö—Ä–∞—Å–∏–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö  
‚Ä¢ üìã –£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ üîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:
"""
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": "http://localhost:5001"})
        ]])
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in app command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def callback_handler(update, context):
    try:
        query = update.callback_query
        if not query:
            logger.error("No callback query in update")
            return
            
        await query.answer()
        
        data = query.data

        if context.user_data.get('awaiting_phone'):
            await request_phone_number(update, context, remind=True)
            return

        if data == "portfolio":
            await portfolio_handler.show_portfolio_menu(update, context)
        elif data == "analysis":
            await analysis_handler.handle_analysis_command(update, context)
        elif data == "help":
            await help_command(update, context)
        elif data == "add_from_photo":
            await portfolio_handler.handle_add_from_photo(update, context)
        elif data == "add_ticker":
            await portfolio_handler.handle_add_ticker(update, context)
        elif data == "show_positions":
            await portfolio_handler.handle_show_positions(update, context)
        elif data == "clear_portfolio":
            await portfolio_handler.handle_clear_portfolio(update, context)
        elif data == "confirm_clear":
            await portfolio_handler.handle_confirm_clear(update, context)
        elif data == "run_analysis":
            await portfolio_handler.handle_run_analysis(update, context)
        elif data == "back_to_portfolio":
            await portfolio_handler.handle_back_to_portfolio(update, context)
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        if query:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            logger.error("Cannot send error message: no query available")


async def message_handler(update, context):
    error_context = ErrorContext(
        user_id=str(update.effective_user.id) if update.effective_user else None,
        operation="message_handler"
    )
    
    try:
        if update.message and update.message.contact:
            await handle_contact(update, context)
            return

        if context.user_data.get('awaiting_phone'):
            await request_phone_number(update, context, remind=True)
            return

        phone_number = context.user_data.get('user_phone')

        if not phone_number:
            user = db_manager.get_user_by_telegram_id(update.effective_user.id)
            if user and getattr(user, 'phone_number', None):
                phone_number = user.phone_number
                context.user_data['user_phone'] = phone_number
            else:
                await request_phone_number(update, context, remind=True)
                return

        if context.user_data.get('waiting_for_photo'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            if update.message and update.message.text:
                context.user_data.pop('waiting_for_photo', None)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                if update.message:
                    await update.message.reply_text(
                        "–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."
                    )
                return

        if context.user_data.get('waiting_for_ticker'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
            if update.message and update.message.text:
                context.user_data.pop('waiting_for_ticker', None)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                await portfolio_handler.handle_ticker_input(update, context)
                return

        message_text = update.message.text

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ"
        from bot.utils.typing_animation import show_typing_animation
        animation = await show_typing_animation(context.bot, update.effective_chat.id, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ")

        try:
            response = await invest_analyst.chat_with_user(phone_number, message_text)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await animation.stop()
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await animation.stop()
            handle_error(
                e,
                severity=ErrorSeverity.HIGH,
                category=ErrorCategory.BUSINESS_LOGIC,
                context=error_context
            )
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        error_info = handle_error(
            e,
            severity=ErrorSeverity.HIGH,
            category=ErrorCategory.TELEGRAM,
            context=error_context
        )
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def photo_handler(update, context):
    try:
        if context.user_data.get('waiting_for_photo'):
            await portfolio_handler.handle_photo(update, context)
        else:
            prompt_message_id = context.user_data.get('photo_prompt_message_id')
            if prompt_message_id:
                reply_to = update.message.reply_to_message
                if reply_to and reply_to.message_id == prompt_message_id:
                    await portfolio_handler.handle_photo(update, context)
                    return

            if context.user_data.get('awaiting_phone'):
                await request_phone_number(update, context, remind=True)
            else:
                await update.message.reply_text(
                    "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ñ–æ—Ç–æ' –≤ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è."
                )

    except Exception as e:
        logger.error(f"Error in photo handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")


def main():
    global application
    
    try:
        config.validate()
        
        create_tables()
        logger.info("Database tables created successfully")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        application = Application.builder().token(config.telegram_bot_token).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("app", app_command))
        application.add_handler(CommandHandler("portfolio", portfolio_handler.show_portfolio_menu))
        application.add_handler(CommandHandler("analysis", analysis_handler.handle_analysis_command))
        
        application.add_handler(CallbackQueryHandler(callback_handler))
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
        application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
        
        logger.info("Starting RadarBot 3.0...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            application.run_polling(
                allowed_updates=["message", "callback_query"],
                drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            )
        except KeyboardInterrupt:
            logger.info("Received keyboard interrupt, shutting down...")
        except Exception as poll_err:
            logger.error(f"Polling stopped: {poll_err}")
            raise
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise
    finally:
        # Graceful shutdown –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if application:
            try:
                asyncio.run(graceful_shutdown())
            except Exception as shutdown_err:
                logger.error(f"Error during final shutdown: {shutdown_err}")


if __name__ == "__main__":
    main()