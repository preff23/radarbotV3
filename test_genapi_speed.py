#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API —á–µ—Ä–µ–∑ gen-api.ru
"""
import asyncio
import os
import sys
import time
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from openai import AsyncOpenAI

async def test_genapi_speed():
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API —á–µ—Ä–µ–∑ gen-api.ru"""
    print("üîç –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API —á–µ—Ä–µ–∑ gen-api.ru...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è gen-api.ru
        client = AsyncOpenAI(
            api_key="sk-sYaKAn8J4zmc7NhbDmrSmO2hSwDZ0xS6g1JWtD8LM1CT7gla8fksbvUDFHsf",
            base_url="https://gen-api.ru/v1"  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        print("üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
        start_time = time.time()
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π."},
                {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ 3 –æ–±–ª–∏–≥–∞—Ü–∏–π: –ê, –ë, –í. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."}
            ],
            max_tokens=500
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:100]}...")
        
        # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
        print("\nüìã –¢–µ—Å—Ç 2: –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç...")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_data = {
            "positions": [
                {
                    "name": f"–û–±–ª–∏–≥–∞—Ü–∏—è {i}",
                    "ticker": f"BOND{i:03d}",
                    "isin": f"RU000A{i:010d}",
                    "type": "bond",
                    "price": 100.0 + i,
                    "ytm": 10.0 + i,
                    "quantity": 10 + i,
                    "value": (100.0 + i) * (10 + i)
                }
                for i in range(10)  # 10 –æ–±–ª–∏–≥–∞—Ü–∏–π
            ],
            "total_value": 25000.0,
            "bond_count": 10,
            "share_count": 0
        }
        
        user_message = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:

–î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:
{portfolio_data}

–î–∞–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
"""
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –æ–±–ª–∏–≥–∞—Ü–∏–π. –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑."},
                {"role": "user", "content": user_message}
            ],
            max_tokens=2000
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:200]}...")
        
        print("\nüéâ –¢–µ—Å—Ç gen-api.ru –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ gen-api.ru: {e}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL...")
        
        alternative_urls = [
            "https://api.gen-api.ru/v1",
            "https://gen-api.ru/api/v1",
            "https://api.gen-api.ru/api/v1"
        ]
        
        for url in alternative_urls:
            try:
                print(f"üìã –ü—Ä–æ–±—É–µ–º URL: {url}")
                client = AsyncOpenAI(
                    api_key="sk-sYaKAn8J4zmc7NhbDmrSmO2hSwDZ0xS6g1JWtD8LM1CT7gla8fksbvUDFHsf",
                    base_url=url
                )
                
                response = await client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç."}
                    ],
                    max_tokens=100
                )
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! URL: {url}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content}")
                return True
                
            except Exception as url_error:
                print(f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {url} - {url_error}")
                continue
        
        print("‚ùå –ù–∏ –æ–¥–∏–Ω URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

if __name__ == "__main__":
    asyncio.run(test_genapi_speed())
