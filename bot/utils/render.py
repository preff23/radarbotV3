from typing import List, Dict, Any, Optional
from datetime import datetime
from bot.providers.aggregator import MarketSnapshot
from bot.core.logging import get_logger

logger = get_logger(__name__)


def format_trading_status(status: Optional[str]) -> str:
    if not status:
        return "‚Äî"
    
    if status == "SECURITY_TRADING_STATUS_NORMAL_TRADING":
        return "‚úÖ –¢–æ—Ä–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã"
    elif status == "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING":
        return "üö® –¢–æ—Ä–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    elif status == "SECURITY_TRADING_STATUS_CLOSING_AUCTION":
        return "üü† –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤"
    elif status == "SECURITY_TRADING_STATUS_OPENING_AUCTION":
        return "üü† –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤"
    elif status == "SECURITY_TRADING_STATUS_BREAK_IN_TRADING":
        return "‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –≤ —Ç–æ—Ä–≥–∞—Ö"
    elif status == "SECURITY_TRADING_STATUS_CLOSED":
        return "üîí –¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã"
    elif status == "SECURITY_TRADING_STATUS_SUSPENDED":
        return "üö® –¢–æ—Ä–≥–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    elif status == "SECURITY_TRADING_STATUS_UNKNOWN":
        return "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    elif status == "T":
        return "‚úÖ –¢–æ—Ä–≥–∏ –∞–∫—Ç–∏–≤–Ω—ã"
    elif status == "S":
        return "üö® –¢–æ—Ä–≥–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    elif status == "N":
        return "üö® –¢–æ—Ä–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    elif status == "C":
        return "üîí –¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã"
    
    else:
        return f"üü† {status}"


def format_percentage(value: Optional[float]) -> str:
    if value is None:
        return "‚Äî"
    
    if value > 0:
        return f"+{value:.2f}%"
    elif value < 0:
        return f"{value:.2f}%"
    else:
        return "0.00%"


def format_price(value: Optional[float], currency: str = "RUB", security_type: str = None, face_value: Optional[float] = None) -> str:
    if value is None or value == "None" or str(value).lower() == "none":
        return "‚Äî"
    
    try:
        float_value = float(value)
        
        if currency is None or currency == "None" or str(currency).lower() == "none":
            currency = "RUB"
        
        if security_type == "bond" and 50 <= float_value <= 200:
            if face_value and face_value > 0:
                price_in_rubles = (float_value * face_value) / 100
                return f"{float_value:.2f}% ({price_in_rubles:.2f} ‚ÇΩ)"
            else:
                return f"{float_value:.2f}%"
        
        if currency == "RUB":
            return f"{float_value:.2f} ‚ÇΩ"
        elif currency == "USD":
            return f"${float_value:.2f}"
        elif currency == "EUR":
            return f"‚Ç¨{float_value:.2f}"
        else:
            return f"{float_value:.2f} {currency}"
    except (ValueError, TypeError):
        return "‚Äî"


def format_date(value: Optional[datetime]) -> str:
    if value is None:
        return "‚Äî"
    
    return value.strftime("%d.%m.%Y")


def get_risk_level(snapshot: MarketSnapshot) -> str:
    if snapshot.security_type == "bond":
        return get_bond_risk_level(snapshot)
    elif snapshot.security_type == "share":
        return get_share_risk_level(snapshot)
    elif snapshot.security_type == "fund":
        return "üü¢ –Ω–∏–∑–∫–∏–π (—Ñ–æ–Ω–¥)"
    else:
        return "‚Äî"


def get_bond_risk_level(snapshot: MarketSnapshot) -> str:
    if snapshot.trading_status:
        if "NOT_AVAILABLE" in snapshot.trading_status or "SUSPENDED" in snapshot.trading_status:
            return "üö® –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π (—Ç–æ—Ä–≥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã)"
        elif snapshot.trading_status not in ["T", "SECURITY_TRADING_STATUS_NORMAL_TRADING"]:
            return "üü† –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç–æ—Ä–≥–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã)"
    
    if snapshot.ytm is None:
        return "üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π (–Ω–µ—Ç YTM)"
    
    if snapshot.ytm > 20:
        return "üî¥ –≤—ã—Å–æ–∫–∏–π"
    elif snapshot.ytm >= 12:
        return "üü† –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    else:
        return "üü¢ –Ω–∏–∑–∫–∏–π"


def get_share_risk_level(snapshot: MarketSnapshot) -> str:
    if snapshot.change_day_pct is None:
        return "üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
    
    if snapshot.change_day_pct > 5:
        return "üü° —É–º–µ—Ä–µ–Ω–Ω—ã–π (—Å–æ–±—ã—Ç–∏–µ/–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)"
    elif snapshot.change_day_pct < -5:
        return "üü† –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    else:
        return "üü¢ –Ω–∏–∑–∫–∏–π"


def get_trend(snapshot: MarketSnapshot) -> str:
    if snapshot.change_day_pct is None:
        return "‚Äî"
    
    if snapshot.change_day_pct > 0:
        return "–†–æ—Å—Ç"
    elif snapshot.change_day_pct < 0:
        return "–ü–∞–¥–µ–Ω–∏–µ"
    else:
        return "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"


def get_sector(snapshot: MarketSnapshot) -> str:
    if snapshot.sector:
        return snapshot.sector
    
    if snapshot.security_type == "bond":
        name = snapshot.name or ""
        return _get_sector_from_keywords(name)
    
    return "‚Äî"


async def get_sector_async(snapshot: MarketSnapshot) -> str:
    if snapshot.sector:
        return snapshot.sector
    
    if snapshot.security_type == "bond":
        name = snapshot.name or ""
        if name:
            from bot.utils.sector_detector import bond_sector_detector
            
            cached_sector = bond_sector_detector.get_sector_from_cache(
                name, snapshot.ticker or "", snapshot.isin or ""
            )
            if cached_sector:
                return cached_sector
            
            try:
                sector = await bond_sector_detector.detect_sector(
                    name, snapshot.ticker or "", snapshot.isin or ""
                )
                return sector or _get_sector_from_keywords(name)
            except Exception as e:
                print(f"AI sector detection failed for '{name}': {e}")
                return _get_sector_from_keywords(name)
        
        return "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è"
    
    return "‚Äî"


def _get_sector_from_keywords(name: str) -> str:
    name_lower = name.lower()
    
    if any(word in name_lower for word in ["–±–∞–Ω–∫", "bank"]):
        return "–ë–∞–Ω–∫–∏"
    elif any(word in name_lower for word in ["–ª–∏–∑–∏–Ω–≥", "leasing"]):
        return "–õ–∏–∑–∏–Ω–≥"
    elif any(word in name_lower for word in ["–Ω–µ—Ñ—Ç—å", "–≥–∞–∑", "oil", "–≥–∞–∑–ø—Ä–æ–º", "–ª—É–∫–æ–π–ª", "—Ä–æ—Å–Ω–µ—Ñ—Ç—å"]):
        return "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"
    elif any(word in name_lower for word in ["—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–∞–≤—Ç–æ", "–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂", "–∞–≤–∏–∞"]):
        return "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    elif any(word in name_lower for word in ["—Å–≤—è–∑—å", "—Ç–µ–ª–µ–∫–æ–º", "–º—Ç—Å", "–º–µ–≥–∞—Ñ–æ–Ω", "–±–∏–ª–∞–π–Ω"]):
        return "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"
    elif any(word in name_lower for word in ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–¥–µ–≤–µ–ª–æ–ø"]):
        return "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
    elif any(word in name_lower for word in ["–º–µ—Ç–∞–ª–ª", "—Å—Ç–∞–ª—å", "–∞–ª—é–º–∏–Ω", "–º–µ–¥—å", "–Ω–∏–∫–µ–ª—å"]):
        return "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è"
    elif any(word in name_lower for word in ["—Ö–∏–º–∏—è", "—Ñ–∞—Ä–º–∞", "–º–µ–¥–∏—Ü–∏–Ω"]):
        return "–•–∏–º–∏—è"
    elif any(word in name_lower for word in ["—Å–µ–ª—å—Å–∫", "–∞–≥—Ä–æ", "–∑–µ—Ä–Ω–æ", "–º—è—Å–æ", "–º–æ–ª–æ—á"]):
        return "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ"
    elif any(word in name_lower for word in ["—Ç–æ—Ä–≥–æ–≤", "—Ä–∏—Ç–µ–π–ª", "–º–∞–≥–∞–∑–∏–Ω", "—Å–µ—Ç—å"]):
        return "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
    elif any(word in name_lower for word in ["–ø–∏—â–µ–≤", "–ø—Ä–æ–¥—É–∫—Ç", "–µ–¥–∞", "–Ω–∞–ø–∏—Ç–∫"]):
        return "–ü–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å"
    elif any(word in name_lower for word in ["–º–∞—à–∏–Ω", "–∞–≤—Ç–æ–º–æ–±", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω", "—Å—Ç–∞–Ω–æ–∫"]):
        return "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ"
    elif any(word in name_lower for word in ["–º—Ñ–∫", "—Ñ–∏–Ω–∞–Ω—Å", "–∫—Ä–µ–¥–∏—Ç", "–∏–Ω–≤–µ—Å—Ç"]):
        return "–§–∏–Ω–∞–Ω—Å—ã"
    elif any(word in name_lower for word in ["–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å", "–æ–±–ª–∏–≥–∞—Ü"]):
        return "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ"
    else:
        return "–î—Ä—É–≥–æ–µ"


async def render_signals_as_cards(snapshots: List[MarketSnapshot], has_shares: bool = False) -> str:
    if not snapshots:
        return "üìä **–¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    filtered_snapshots = []
    for snapshot in snapshots:
        if snapshot.security_type == "bond":
            filtered_snapshots.append(snapshot)
        elif snapshot.security_type == "share" and has_shares:
            filtered_snapshots.append(snapshot)
        elif snapshot.security_type not in ["share", "bond"]:
            filtered_snapshots.append(snapshot)
    
    if not filtered_snapshots:
        return "üìä **–¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    header = "üìä **–¢–ê–ë–õ–ò–¶–ê –°–ò–ì–ù–ê–õ–û–í**\n"
    header += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    cards = []
    
    for i, snapshot in enumerate(filtered_snapshots, 1):
        card = await render_single_signal_card(snapshot)
        cards.append(card)
    
    cards_text = "\n\n".join(cards)
    
    return header + cards_text


async def render_single_signal_card(snapshot: MarketSnapshot) -> str:
    name = snapshot.name or snapshot.ticker or snapshot.secid
    ticker = snapshot.ticker or "‚Äî"
    isin = snapshot.isin or "‚Äî"
    
    def escape_markdown(text: str) -> str:
        if not text:
            return text
        return text.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]')
    
    name = escape_markdown(name)
    ticker = escape_markdown(ticker)
    isin = escape_markdown(isin)
    
    if snapshot.security_type == "share":
        header_emoji = "üìà"
        type_name = "–ê–∫—Ü–∏—è"
    elif snapshot.security_type == "bond":
        header_emoji = "üèõÔ∏è"
        type_name = "–û–±–ª–∏–≥–∞—Ü–∏—è"
    elif snapshot.security_type == "fund":
        header_emoji = "üìä"
        type_name = "–§–æ–Ω–¥"
    else:
        header_emoji = "üìã"
        type_name = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
    
    card = f"{header_emoji} **{name}**\n"
    card += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    card += f"üè∑Ô∏è **{ticker}**"
    if isin != "‚Äî" and isin != ticker:
        card += f" ‚Ä¢ {isin}"
    card += f"\nüìã {type_name}\n"
    
    price = format_price(snapshot.last_price, snapshot.currency, snapshot.security_type, snapshot.face_value)
    change = format_percentage(snapshot.change_day_pct)
    
    if snapshot.change_day_pct is not None:
        if snapshot.change_day_pct > 0:
            change_emoji = "üìà"
        elif snapshot.change_day_pct < 0:
            change_emoji = "üìâ"
        else:
            change_emoji = "‚û°Ô∏è"
    else:
        change_emoji = "‚ùì"
    
    card += f"üí∞ {price} {change_emoji} {change}\n"
    
    risk = get_risk_level(snapshot)
    trend = get_trend(snapshot)
    card += f"‚ö†Ô∏è {risk}\n"
    card += f"üìä –¢—Ä–µ–Ω–¥: {trend}\n"
    
    sector = await get_sector_async(snapshot)
    if sector != "‚Äî":
        card += f"üè¢ {sector}\n"
    
    if snapshot.trading_status:
        status_display = format_trading_status(snapshot.trading_status)
        card += f"{status_display}\n"
    
    if snapshot.security_type == "bond":
        if snapshot.ytm is not None:
            card += f"üìä YTM: {snapshot.ytm:.2f}%\n"
        if snapshot.next_coupon_date and snapshot.coupon_value is not None:
            coupon_date = format_date(snapshot.next_coupon_date)
            coupon_value = format_price(snapshot.coupon_value, snapshot.currency, snapshot.security_type, snapshot.face_value)
            card += f"üìÖ –ö—É–ø–æ–Ω: {coupon_date} ‚Ä¢ {coupon_value}\n"
        elif snapshot.next_coupon_date:
            coupon_date = format_date(snapshot.next_coupon_date)
            card += f"üìÖ –ö—É–ø–æ–Ω: {coupon_date}\n"
        if snapshot.maturity_date:
            maturity_date = format_date(snapshot.maturity_date)
            card += f"üèÅ –ü–æ–≥–∞—à–µ–Ω–∏–µ: {maturity_date}\n"
    
    elif snapshot.security_type == "share":
        if snapshot.next_dividend_date and snapshot.dividend_value is not None:
            div_date = format_date(snapshot.next_dividend_date)
            div_value = format_price(snapshot.dividend_value, snapshot.currency, snapshot.security_type, snapshot.face_value)
            card += f"üí∞ –î–∏–≤–∏–¥–µ–Ω–¥: {div_date} ‚Ä¢ {div_value}\n"
        elif snapshot.next_dividend_date:
            div_date = format_date(snapshot.next_dividend_date)
            card += f"üí∞ –î–∏–≤–∏–¥–µ–Ω–¥: {div_date}\n"
    
    card += f"‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–µ—Ñ–æ–ª—Ç–æ–≤: –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ"
    
    return card


def render_calendar_30d(calendar_data: List[Dict[str, Any]]) -> str:
    if not calendar_data:
        return "üìÖ ‚Ä¢–ö–ê–õ–ï–ù–î–ê–†–¨ –í–´–ü–õ–ê–¢ (30 –î–ù–ï–ô)‚Ä¢\n\n‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π"
    
    current_date = datetime.now()
    logger.info(f"Rendering calendar with {len(calendar_data)} events")
    logger.info(f"Current date: {current_date}")
    
    future_events = []
    for event in calendar_data:
        event_date = event.get("date")
        logger.info(f"Event: {event.get('secid', 'unknown')} - date: {event_date}, type: {event.get('type', 'unknown')}")
        if event_date and event_date >= current_date:
            future_events.append(event)
            logger.info(f"  -> Added to future events")
        else:
            logger.info(f"  -> Skipped (past date or no date)")
    
    logger.info(f"Found {len(future_events)} future events")
    
    if not future_events:
        return "üìÖ ‚Ä¢–ö–ê–õ–ï–ù–î–ê–†–¨ –í–´–ü–õ–ê–¢ (30 –î–ù–ï–ô)‚Ä¢\n\n‚ùå –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–ø–ª–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π"
    
    calendar_text = "üìÖ ‚Ä¢–ö–ê–õ–ï–ù–î–ê–†–¨ –í–´–ü–õ–ê–¢ (30 –î–ù–ï–ô)‚Ä¢\n"
    calendar_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    sorted_events = sorted(future_events, key=lambda x: x["date"])
    
    for i, event in enumerate(sorted_events, 1):
        date_str = event["date"].strftime("%d.%m.%Y")
        event_type = "–ö—É–ø–æ–Ω" if event["type"] == "coupon" else "–ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è"
        value = format_price(event["value"], "RUB", "bond", None)
        
        secid = event.get("secid", "")
        moex_url = f"https://www.moex.com/ru/issue.aspx?board=TQCB&code={secid}" if secid else ""
        
        event_emoji = "üí∞" if event["type"] == "coupon" else "üè¶"
        
        calendar_text += f"üìÖ ‚Ä¢{date_str}‚Ä¢\n"
        calendar_text += f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        calendar_text += f"‚îÇ {event_emoji} {event_type}: {value}\n"
        calendar_text += f"‚îÇ üè∑Ô∏è –í—ã–ø—É—Å–∫: {event.get('name', '‚Äî')}\n"
        if moex_url:
            calendar_text += f"‚îÇ üîó MOEX: {moex_url}\n"
        calendar_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        if i < len(sorted_events):
            calendar_text += "\n"
    
    return calendar_text


def render_payment_history(payment_history: Dict[str, Any]) -> str:
    if not payment_history or not payment_history.get("history"):
        return "üìä ‚Ä¢–ò–°–¢–û–†–ò–Ø –í–´–ü–õ–ê–¢‚Ä¢\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–ª–∞—Ç"
    
    history_data = payment_history["history"]
    risk_signals = payment_history.get("risk_signals", [])
    
    history_text = "üìä ‚Ä¢–ò–°–¢–û–†–ò–Ø –í–´–ü–õ–ê–¢‚Ä¢\n"
    history_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    total_bonds = payment_history.get("total_bonds_analyzed", 0)
    bonds_with_history = payment_history.get("bonds_with_history", 0)
    
    history_text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:**\n"
    history_text += f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    history_text += f"‚îÇ üìä –í—Å–µ–≥–æ –æ–±–ª–∏–≥–∞—Ü–∏–π: {total_bonds}\n"
    history_text += f"‚îÇ üìã –° –∏—Å—Ç–æ—Ä–∏–µ–π –≤—ã–ø–ª–∞—Ç: {bonds_with_history}\n"
    history_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    if risk_signals:
        history_text += f"‚ö†Ô∏è **–°–∏–≥–Ω–∞–ª—ã —Ä–∏—Å–∫–∞:**\n"
        for signal in risk_signals[:5]:
            history_text += f"‚Ä¢ {signal}\n"
        history_text += "\n"
    
    for secid, history in list(history_data.items())[:3]:
        history_text += f"üè∑Ô∏è **{secid}**\n"
        history_text += f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        if history.total_events == 0:
            history_text += f"‚îÇ üìä –°–æ–±—ã—Ç–∏–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
            history_text += f"‚îÇ ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è –æ–±–ª–∏–≥–∞—Ü–∏—è\n"
        else:
            history_text += f"‚îÇ üìä –°–æ–±—ã—Ç–∏–π: {history.total_events}\n"
            history_text += f"‚îÇ ‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ: {history.paid_events}\n"
            history_text += f"‚îÇ ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {history.cancelled_events}\n"
            history_text += f"‚îÇ ‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–µ–∫: {history.delayed_events}\n"
        history_text += f"‚îÇ üìà –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {history.reliability_score:.1f}%\n"
        history_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    
    return history_text


def render_news_summary(news_items: List[Dict[str, Any]], holdings: List[Any] = None) -> str:
    if not news_items:
        return "üì∞ **–ù–û–í–û–°–¢–ù–û–ô –§–û–ù**\n\n‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —ç–º–∏—Ç–µ–Ω—Ç–∞–º"
    
    news_text = "üì∞ **–ù–û–í–û–°–¢–ù–û–ô –§–û–ù**\n"
    news_text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    for i, item in enumerate(news_items[:5], 1):
        title = item.get("title", "")
        link = item.get("link", "")
        source = item.get("source", "")
        published_at = item.get("published_at")
        related_tickers = item.get("related_tickers", [])
        related_issuers = item.get("related_issuers", [])
        matched_terms = item.get("matched_terms", [])
        
        if published_at:
            date_str = published_at.strftime("%d.%m.%Y %H:%M")
        else:
            date_str = "‚Äî"
        
        if "rbc" in source.lower():
            source_emoji = "üî¥"
        elif "smart-lab" in source.lower():
            source_emoji = "üß†"
        else:
            source_emoji = "üì∞"
        
        news_text += f"üì∞ **{title}**\n"
        news_text += f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        news_text += f"‚îÇ {source_emoji} –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        news_text += f"‚îÇ üìÖ –î–∞—Ç–∞: {date_str}\n"
        
        affected_positions = []
        
        if holdings:
            for ticker in related_tickers:
                for holding in holdings:
                    if holding.ticker == ticker:
                        affected_positions.append(f"{holding.normalized_name} ({holding.ticker})")
            
            for issuer in related_issuers:
                for holding in holdings:
                    if holding.normalized_name == issuer:
                        affected_positions.append(f"{holding.normalized_name} ({holding.ticker})")
            
            for term in matched_terms:
                if term in ['–°–ë–ï–†–ë–ê–ù–ö', '–ë–ê–ù–ö', '–ë–ê–ù–ö–û–í–°–ö–ò–ô']:
                    for holding in holdings:
                        if holding.ticker == 'SBER' or '–ë–ê–ù–ö' in holding.normalized_name.upper():
                            affected_positions.append(f"{holding.normalized_name} ({holding.ticker})")
                elif term in ['–ì–ê–ó–ü–†–û–ú', '–ì–ê–ó', '–ì–ê–ó–û–í–´–ô']:
                    for holding in holdings:
                        if holding.ticker == 'GAZP' or '–ì–ê–ó' in holding.normalized_name.upper():
                            affected_positions.append(f"{holding.normalized_name} ({holding.ticker})")
                elif term in ['–õ–£–ö–û–ô–õ', '–ù–ï–§–¢–¨', '–ù–ï–§–¢–Ø–ù–û–ô']:
                    for holding in holdings:
                        if holding.ticker == 'LKOH' or '–ù–ï–§–¢–¨' in holding.normalized_name.upper():
                            affected_positions.append(f"{holding.normalized_name} ({holding.ticker})")
        
        affected_positions = list(set(affected_positions))
        if affected_positions:
            news_text += f"‚îÇ üìà –ó–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç: {', '.join(affected_positions)}\n"
        else:
            news_text += f"‚îÇ üìà –ó–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç: –æ–±—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        
        if link:
            news_text += f"‚îÇ üîó [–ß–∏—Ç–∞—Ç—å]({link})\n"
        news_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        if i < min(len(news_items), 5):
            news_text += "\n"
    
    return news_text


def render_portfolio_summary(
    snapshots: List[MarketSnapshot],
    ocr_meta: Optional[Dict[str, Any]] = None,
    accounts: Optional[List[Any]] = None,
    cash_by_account: Optional[Dict[int, List[Any]]] = None
) -> str:
    summary = "üìä **–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–û–†–¢–§–ï–õ–Ø**\n"
    summary += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"

    portfolio_name = ocr_meta.get("portfolio_name") if ocr_meta else None
    portfolio_value = ocr_meta.get("portfolio_value") if ocr_meta else None
    portfolio_currency = ocr_meta.get("currency") if ocr_meta else "RUB"
    positions_count = ocr_meta.get("positions_count") if ocr_meta else None

    if portfolio_name:
        summary += f"üìÅ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {portfolio_name}\n"

    if portfolio_value is not None:
        if portfolio_currency == "RUB":
            value_str = f"{portfolio_value:,.2f} ‚ÇΩ"
        elif portfolio_currency == "USD":
            value_str = f"${portfolio_value:,.2f}"
        elif portfolio_currency == "EUR":
            value_str = f"‚Ç¨{portfolio_value:,.2f}"
        else:
            value_str = f"{portfolio_value:,.2f} {portfolio_currency}"
        summary += f"üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {value_str}\n"

    if positions_count is not None:
        summary += f"üìà **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:** {positions_count}\n"

    total_value = sum(snapshot.last_price for snapshot in snapshots if snapshot.last_price)
    change_values = [snapshot.change_day_pct for snapshot in snapshots if snapshot.change_day_pct is not None]
    if total_value and portfolio_value is None:
        summary += f"üí∞ **–û—Ü–µ–Ω–∫–∞ —Å–æ–≤–æ–∫—É–ø–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:** {total_value:.2f} ‚ÇΩ\n"
    if change_values:
        avg_change = sum(change_values) / len(change_values)
        summary += f"üìâ **–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:** {avg_change:.2f}%\n"

    summary += "\nüìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤:**\n"
    summary += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    distribution = {"–ê–∫—Ü–∏–∏": 0, "–û–±–ª–∏–≥–∞—Ü–∏–∏": 0, "–§–æ–Ω–¥—ã": 0, "–ü—Ä–æ—á–µ–µ": 0}
    for snapshot in snapshots:
        if snapshot.security_type == "share":
            distribution["–ê–∫—Ü–∏–∏"] += 1
        elif snapshot.security_type == "bond":
            distribution["–û–±–ª–∏–≥–∞—Ü–∏–∏"] += 1
        elif snapshot.security_type == "fund":
            distribution["–§–æ–Ω–¥—ã"] += 1
        else:
            distribution["–ü—Ä–æ—á–µ–µ"] += 1

    total_count = len(snapshots) if snapshots else 1

    for asset_type, count in distribution.items():
        percentage = (count / total_count) * 100
        summary += f"‚îÇ {asset_type}: {count} ({percentage:.0f}%)\n"

    summary += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    if accounts:
        summary += "\nüè¶ **–°—á–µ—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:**\n"
        summary += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        for account in accounts:
            account_name = getattr(account, "account_name", None) or getattr(account, "account_id", None) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á—ë—Ç"
            currency = getattr(account, "currency", None) or "RUB"
            value = getattr(account, "portfolio_value", None)
            if value is not None:
                if currency == "RUB":
                    value_str = f"{value:,.2f} ‚ÇΩ"
                elif currency == "USD":
                    value_str = f"${value:,.2f}"
                elif currency == "EUR":
                    value_str = f"‚Ç¨{value:,.2f}"
                else:
                    value_str = f"{value:,.2f} {currency}"
            else:
                value_str = "‚Äî"

            summary += f"‚îÇ {account_name}: {value_str}\n"

            daily_change_value = getattr(account, "daily_change_value", None)
            daily_change_percent = getattr(account, "daily_change_percent", None)
            if daily_change_value is not None or daily_change_percent is not None:
                change_parts = []
                if daily_change_value is not None:
                    change_value_str = format_price(daily_change_value, currency)
                    change_parts.append(change_value_str)
                if daily_change_percent is not None:
                    perc = f"{daily_change_percent:+.2f}%"
                    change_parts.append(perc)
                summary += f"‚îÇ   Œî {', '.join(change_parts)}\n"

            cash_entries = (cash_by_account or {}).get(getattr(account, "id", None), [])
            if cash_entries:
                for cash in cash_entries:
                    cash_value = cash.amount or 0
                    cash_currency = cash.currency or currency
                    if cash_currency == "RUB":
                        cash_str = f"{cash_value:,.2f} ‚ÇΩ"
                    elif cash_currency == "USD":
                        cash_str = f"${cash_value:,.2f}"
                    elif cash_currency == "EUR":
                        cash_str = f"‚Ç¨{cash_value:,.2f}"
                    else:
                        cash_str = f"{cash_value:,.2f} {cash_currency}"
                    summary += f"‚îÇ   üíµ {cash.raw_name or 'Cash'}: {cash_str}\n"

        summary += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    elif cash_by_account and cash_by_account.get(None):
        summary += "\nüíµ **–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:**\n"
        summary += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        for cash in cash_by_account.get(None, []):
            cash_currency = cash.currency or "RUB"
            if cash_currency == "RUB":
                cash_str = f"{cash.amount:,.2f} ‚ÇΩ"
            elif cash_currency == "USD":
                cash_str = f"${cash.amount:,.2f}"
            elif cash_currency == "EUR":
                cash_str = f"‚Ç¨{cash.amount:,.2f}"
            else:
                cash_str = f"{cash.amount:,.2f} {cash_currency}"
            summary += f"‚îÇ {cash.raw_name or 'Cash'}: {cash_str}\n"
        summary += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
 
    if ocr_meta and ocr_meta.get("warnings"):
        summary += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è OCR:**\n"
        for warn in ocr_meta["warnings"]:
            summary += f"- {warn}\n"
        summary += "\n"

    return summary


def render_recommendations(snapshots: List[MarketSnapshot]) -> str:
    recommendations = []
    
    recommendations.append("üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**")
    recommendations.append("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    recommendations.append("")
    
    high_risk = [s for s in snapshots if "üî¥" in get_risk_level(s) or "üö®" in get_risk_level(s)]
    monitor_risk = [s for s in snapshots if "üü†" in get_risk_level(s)]
    
    if high_risk:
        recommendations.append("üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:**")
        recommendations.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        for snapshot in high_risk:
            name = snapshot.name or snapshot.ticker or snapshot.secid
            risk = get_risk_level(snapshot)
            recommendations.append(f"‚îÇ ‚ö†Ô∏è {name} - {risk}")
        recommendations.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        recommendations.append("")
    
    if monitor_risk:
        recommendations.append("üü† **–ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**")
        recommendations.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        for snapshot in monitor_risk:
            name = snapshot.name or snapshot.ticker or snapshot.secid
            risk = get_risk_level(snapshot)
            recommendations.append(f"‚îÇ üëÅÔ∏è {name} - {risk}")
        recommendations.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        recommendations.append("")
    
    declining = [s for s in snapshots if get_trend(s) == "–ü–∞–¥–µ–Ω–∏–µ"]
    if declining:
        recommendations.append("üìâ **–ü–∞–¥–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:**")
        recommendations.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        for snapshot in declining:
            name = snapshot.name or snapshot.ticker or snapshot.secid
            change = format_percentage(snapshot.change_day_pct)
            recommendations.append(f"‚îÇ üìâ {name} ({change})")
        recommendations.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        recommendations.append("")
    
    rising = [s for s in snapshots if get_trend(s) == "–†–æ—Å—Ç"]
    if rising:
        recommendations.append("üìà **–†–∞—Å—Ç—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:**")
        recommendations.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        for snapshot in rising:
            name = snapshot.name or snapshot.ticker or snapshot.secid
            change = format_percentage(snapshot.change_day_pct)
            recommendations.append(f"‚îÇ üìà {name} ({change})")
        recommendations.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        recommendations.append("")
    
    if not high_risk and not monitor_risk and not declining:
        recommendations.append("‚úÖ **–ü–æ—Ä—Ç—Ñ–µ–ª—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏**")
        recommendations.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        recommendations.append("‚îÇ üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ")
        recommendations.append("‚îÇ üìä –†–∏—Å–∫–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")
        recommendations.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    
    return "\n".join(recommendations)