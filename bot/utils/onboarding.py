from typing import Optional
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from bot.core.db import db_manager
from bot.core.logging import get_logger

logger = get_logger(__name__)

PHONE_REQUEST_TEXT = (
    "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è RadarBot, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
)


def _build_phone_keyboard() -> ReplyKeyboardMarkup:
    button = KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    return ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)


async def send_main_menu(context, chat_id: int, tg_user) -> None:
    welcome_message = f"""
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RadarBot 3.0!**

–ü—Ä–∏–≤–µ—Ç, {tg_user.first_name or tg_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏:

üì∏ **OCR –∞–Ω–∞–ª–∏–∑** - –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
üìä **–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
üîç **–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤** - –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Altman
üìÖ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç** - –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫—É–ø–æ–Ω—ã
üì∞ **–ù–æ–≤–æ—Å—Ç–∏** - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —ç–º–∏—Ç–µ–Ω—Ç–∞–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="portfolio")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏–∑", callback_data="analysis")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_message,
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )


async def request_phone_number(update, context, *, remind: bool = False) -> None:
    text = PHONE_REQUEST_TEXT
    if remind:
        text = (
            "–ù—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
        )

    keyboard = _build_phone_keyboard()

    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    elif update.callback_query:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=keyboard,
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=keyboard,
        )

    context.user_data["awaiting_phone"] = True


async def handle_contact(update, context) -> None:
    try:
        contact = update.message.contact
        if not contact or not contact.phone_number:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await request_phone_number(update, context, remind=True)
            return

        if contact.user_id and contact.user_id != update.effective_user.id:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
            )
            await request_phone_number(update, context, remind=True)
            return

        normalized_phone = db_manager.normalize_phone(contact.phone_number)
        if not normalized_phone:
            await update.message.reply_text(
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await request_phone_number(update, context, remind=True)
            return

        tg_user = update.effective_user
        db_user = db_manager.ensure_user(
            normalized_phone,
            telegram_id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
        )

        context.user_data["awaiting_phone"] = False
        context.user_data["user_phone"] = normalized_phone

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.",
            reply_markup=ReplyKeyboardRemove(),
        )

        await send_main_menu(context, update.effective_chat.id, tg_user)

    except Exception as e:
        logger.error(f"Error handling contact: {e}")
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await request_phone_number(update, context, remind=True)
