import asyncio
import openai
from typing import Optional, Dict, Any
from bot.core.config import config
from bot.core.logging import setup_logging

setup_logging()

class BondSectorDetector:
    
    def __init__(self):
        self.openai_client = openai.OpenAI(
            base_url="https://neuroapi.host/v1",
            api_key=config.openai_api_key
        )
        self.sector_cache = {}
    
    async def detect_sector(self, bond_name: str, ticker: str = "", isin: str = "") -> Optional[str]:
        """Detect bond sector using AI analysis of the bond name.

        Args:
            bond_name: Full name of the bond
            ticker: Bond ticker (optional)
            isin: Bond ISIN (optional)

        Returns:
            Detected sector name or None
        """
        if not bond_name:
            return None
        
        cache_key = f"{bond_name}_{ticker}_{isin}"
        if cache_key in self.sector_cache:
            return self.sector_cache[cache_key]
        
        try:
            context = f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond_name}"
            if ticker:
                context += f"\n–¢–∏–∫–µ—Ä: {ticker}"
            if isin:
                context += f"\nISIN: {isin}"
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Ç—Ä–∞—Å–ª—å —ç–º–∏—Ç–µ–Ω—Ç–∞.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Ç—Ä–∞—Å–ª—å —ç–º–∏—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±–ª–∏–≥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:

1. –ë–∞–Ω–∫–∏ - –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
2. –õ–∏–∑–∏–Ω–≥ - –ª–∏–∑–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
3. –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ - –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞
4. –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç - —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, –ª–æ–≥–∏—Å—Ç–∏–∫–∞
5. –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ - –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∑–∏, IT-–∫–æ–º–ø–∞–Ω–∏–∏
6. –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
7. –ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è - –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –≥–æ—Ä–Ω–æ–¥–æ–±—ã—á–∞
8. –•–∏–º–∏—è - —Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞
9. –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ - –∞–≥—Ä–æ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
10. –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–µ—Ç–∏, —Ä–∏—Ç–µ–π–ª
11. –ü–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
12. –ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ - –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
13. –§–∏–Ω–∞–Ω—Å—ã - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ –±–∞–Ω–∫–∏), –ú–§–ö
14. –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ
15. –î—Ä—É–≥–æ–µ - –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ç—Ä–∞—Å–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""

            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –æ–±–ª–∏–≥–∞—Ü–∏—è–º –∏ –æ—Ç—Ä–∞—Å–ª—è–º —ç–∫–æ–Ω–æ–º–∏–∫–∏."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=50,
                temperature=0.1
            )
            
            sector = response.choices[0].message.content.strip()
            
            valid_sectors = [
                "–ë–∞–Ω–∫–∏", "–õ–∏–∑–∏–Ω–≥", "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–ú–µ—Ç–∞–ª–ª—É—Ä–≥–∏—è", "–•–∏–º–∏—è", "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ",
                "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "–ü–∏—â–µ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å", "–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                "–§–∏–Ω–∞–Ω—Å—ã", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ", "–î—Ä—É–≥–æ–µ"
            ]
            
            if sector in valid_sectors:
                self.sector_cache[cache_key] = sector
                return sector
            else:
                sector_lower = sector.lower()
                for valid_sector in valid_sectors:
                    if valid_sector.lower() in sector_lower or sector_lower in valid_sector.lower():
                        self.sector_cache[cache_key] = valid_sector
                        return valid_sector
                
                self.sector_cache[cache_key] = "–î—Ä—É–≥–æ–µ"
                return "–î—Ä—É–≥–æ–µ"
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è '{bond_name}': {e}")
            return None
    
    def get_sector_from_cache(self, bond_name: str, ticker: str = "", isin: str = "") -> Optional[str]:
        cache_key = f"{bond_name}_{ticker}_{isin}"
        return self.sector_cache.get(cache_key)

bond_sector_detector = BondSectorDetector()

async def test_sector_detection():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–µ–π –æ–±–ª–∏–≥–∞—Ü–∏–π...")
    
    test_bonds = [
        ("–ü–ò–† –ë–û-02-001P", "RU000A108C17", "RU000A108C17"),
        ("–†–î–í –¢–ï–•–ù–û–õ–û–î–ñ–ò 1P1", "RU000A10ANT1", "RU000A10ANT1"),
        ("–†–ï–ì–ò–ù–°–ü–ï–¶–¢–†–ê–ù–°-01", "RU000A109NM3", "RU000A109NM3"),
        ("–°–∏–±–∏—Ä—Å–∫–∏–π –ö–•–ü 001P-04", "RU000A10BRN3", "RU000A10BRN3"),
        ("–¢–î –†–ö–°-–°–æ—á–∏ –≤—ã–ø—É—Å–∫ 1", "RU000A101PV6", "RU000A101PV6"),
        ("–£–ü–¢–ö-65 001–†-01", "RU000A10C9Z9", "RU000A10C9Z9"),
        ("–ú–§–ö –í–≠–ë–ë–ê–ù–ö–ò–† 06", "RU000A1082K7", "RU000A1082K7"),
        ("–û–∏–ª –†–µ—Å—É—Ä—Å 001P-02", "RU000A10C8H9", "RU000A10C8H9"),
        ("–ü–∏–æ–Ω–µ—Ä-–õ–∏–∑–∏–Ω–≥ –ë–û6", "RU000A1090H6", "RU000A1090H6"),
        ("–ò–Ω—Ç–µ—Ä—Å–∫–æ–ª –ö–õ–° –ë–û-03", "RU000A10ATB6", "RU000A10ATB6"),
        ("–õ–ö –†–æ–¥–µ–ª–µ–Ω –ë–û 001–†-04", "RU000A105SK4", "RU000A105SK4"),
    ]
    
    for name, ticker, isin in test_bonds:
        print(f"\nüîç –û–±–ª–∏–≥–∞—Ü–∏—è: {name}")
        print(f"   –¢–∏–∫–µ—Ä: {ticker}")
        
        try:
            sector = await bond_sector_detector.detect_sector(name, ticker, isin)
            print(f"   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å: {sector}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_sector_detection())