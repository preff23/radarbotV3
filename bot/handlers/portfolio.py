import asyncio
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.core.db import db_manager
from bot.pipeline.portfolio_ingest_pipeline import ingest_pipeline
from bot.analytics.portfolio_analyzer import portfolio_analyzer
from bot.core.logging import get_logger
from bot.utils.onboarding import request_phone_number

logger = get_logger(__name__)


class PortfolioHandler:
    
    def __init__(self):
        self.db_manager = db_manager
        self.ingest_pipeline = ingest_pipeline
        self.portfolio_analyzer = portfolio_analyzer
    
    def _get_user_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        phone = context.user_data.get('user_phone')
        if phone:
            return phone

        tg_user = update.effective_user
        if not tg_user:
            return None

        user = self.db_manager.get_user_by_telegram_id(tg_user.id)
        if user and getattr(user, 'phone_number', None):
            context.user_data['user_phone'] = user.phone_number
            return user.phone_number
        return None
    
    async def _require_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[str]:
        phone = self._get_user_phone(update, context)
        if not phone:
            await request_phone_number(update, context, remind=True)
        return phone
    
    async def show_portfolio_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            phone = await self._require_phone(update, context)
            if not phone:
                return

            user = self.db_manager.get_user_by_phone(phone)
            if not user:
                await request_phone_number(update, context, remind=True)
                return

            holdings = self.db_manager.get_user_holdings(user.id, active_only=True)
            holdings_count = len(holdings)

            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ñ–æ—Ç–æ", callback_data="add_from_photo")],
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä", callback_data="add_ticker")],
                [InlineKeyboardButton("üìã –ü–æ–∑–∏—Ü–∏–∏", callback_data="show_positions")],
                [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_portfolio")],
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑", callback_data="run_analysis")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            message = f"üìä **–ü–æ—Ä—Ç—Ñ–µ–ª—å**\n\n"
            message += f"–ü–æ–∑–∏—Ü–∏–π: {holdings_count}\n"
            message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name or user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"Failed to show portfolio menu: {e}")
            if update.callback_query:
                await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    async def handle_add_from_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()
            
            prompt_message = await query.edit_message_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±—Ä–æ–∫–µ—Ä–æ–≤, "
                "–≤—ã–ø–∏—Å–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥–∞—Ö."
            )

            context.user_data['waiting_for_photo'] = True
            context.user_data['photo_prompt_message_id'] = prompt_message.message_id
            
        except Exception as e:
            logger.error(f"Failed to handle add from photo: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_add_ticker(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: SBER, GAZP, LKOH, RU000A105VZ0"
            )
            
            context.user_data['waiting_for_ticker'] = True
            
        except Exception as e:
            logger.error(f"Failed to handle add ticker: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_show_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()

            phone = await self._require_phone(update, context)
            if not phone:
                return

            user = self.db_manager.get_user_by_phone(phone)

            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            holdings = self.db_manager.get_user_holdings(user.id, active_only=True)
            
            if not holdings:
                await query.edit_message_text("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç")
                return
            
            positions_text = "üìã **–¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:**\n\n"
            
            for i, holding in enumerate(holdings, 1):
                positions_text += f"{i}. **{holding.normalized_name}**\n"
                if holding.ticker:
                    positions_text += f"   –¢–∏–∫–µ—Ä: {holding.ticker}\n"
                if holding.isin:
                    positions_text += f"   ISIN: {holding.isin}\n"
                if holding.security_type:
                    positions_text += f"   –¢–∏–ø: {holding.security_type}\n"
                if holding.provider:
                    positions_text += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {holding.provider}\n"
                positions_text += "\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_portfolio")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                positions_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Failed to show positions: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∑–∏—Ü–∏–π")
    
    async def handle_clear_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_portfolio")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ø–æ—Ä—Ç—Ñ–µ–ª—å?\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Failed to handle clear portfolio: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_confirm_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()

            phone = await self._require_phone(update, context)
            if not phone:
                return

            user = self.db_manager.get_user_by_phone(phone)

            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            cleared_count = self.db_manager.clear_user_holdings(user.id)
            try:
                self.db_manager.clear_portfolio_meta(user.id)
            except Exception:
                pass
            
            await query.edit_message_text(
                f"‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ—á–∏—â–µ–Ω\n\n"
                f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {cleared_count}"
            )
            
        except Exception as e:
            logger.error(f"Failed to confirm clear: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    
    async def handle_run_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()

            phone = await self._require_phone(update, context)
            if not phone:
                return

            user = self.db_manager.get_user_by_phone(phone)

            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            await query.edit_message_text("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            analysis = await self.portfolio_analyzer.run_analysis(user.id)
            
            if "error" in analysis:
                await query.edit_message_text(f"‚ùå {analysis['error']}")
                return
            
            await self._send_analysis_results(query, analysis)
            
        except Exception as e:
            logger.error(f"Failed to run analysis: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    async def _send_analysis_results(self, query, analysis: Dict[str, Any]):
        try:
            chat = query.message.chat if query.message else query.effective_chat
            
            def clean_text(text):
                text = text.replace('*', '‚Ä¢')
                text = text.replace('[', '(')
                text = text.replace(']', ')')
                text = text.replace('`', "'")
                return text
            
            parts = []
            parts.append(clean_text(analysis["summary"]))
            
            # –£–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤ - –ø—É—Å—Ç—å –ò–ò —Å–∞–º —Ä–µ—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç
            if analysis.get("calendar_30d"):
                parts.append(clean_text(analysis["calendar_30d"]))
            if analysis.get("payment_history_summary") and "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" not in analysis["payment_history_summary"]:
                parts.append(clean_text(analysis["payment_history_summary"]))
            if analysis.get("news_summary") and "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π" not in analysis["news_summary"]:
                parts.append(clean_text(analysis["news_summary"]))
            if analysis.get("recommendations"):
                parts.append("üí° ‚Ä¢–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏‚Ä¢\n\n" + clean_text(analysis["recommendations"]))
            if analysis.get("ai_analysis"):
                parts.append("ü§ñ ‚Ä¢AI-–∞–Ω–∞–ª–∏–∑‚Ä¢\n\n" + clean_text(analysis["ai_analysis"]))

            combined = '\n\n'.join(parts)
            max_chunk_size = 3500

            if len(combined) <= max_chunk_size:
                await query.edit_message_text(combined)
            else:
                await query.edit_message_text("üìä ‚Ä¢–û–¢–ß–Å–¢ –ü–û –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–û–ú–£ –ü–û–†–¢–§–ï–õ–Æ‚Ä¢")
                paragraphs = combined.split('\n\n')
                current_chunk = ""
                for para in paragraphs:
                    if len(current_chunk + para) > max_chunk_size and current_chunk:
                        await chat.send_message(current_chunk)
                        current_chunk = para
                    else:
                        current_chunk += '\n\n' + para if current_chunk else para
                if current_chunk:
                    await chat.send_message(current_chunk)
 
        except Exception as e:
            logger.error(f"Failed to send analysis results: {e}")
            chat = query.message.chat if query.message else query.effective_chat
            await chat.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not update.message or not update.message.photo:
                await update.message.reply_text(
                    "–ù–µ –≤–∏–∂—É —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é /portfolio."
                )
                return

            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            photo_bytes = await file.download_as_bytearray()
            
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
            
            phone = await self._require_phone(update, context)
            if not phone:
                await processing_msg.edit_text("–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ.")
                return

            user = self.db_manager.get_user_by_phone(phone)

            if not user:
                await processing_msg.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            if processing_msg.text != "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...":
                await processing_msg.edit_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
            
            result = await self.ingest_pipeline.ingest_from_photo(user.phone_number, photo_bytes)

            if result.reason == "ok":
                holdings = self.db_manager.get_user_holdings(user.id, active_only=True)

                message = f"‚úÖ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
                message += f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {result.added}\n"
                message += f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {result.merged}\n"
                message += f"–ù–∞–π–¥–µ–Ω–æ OCR (—Å—ã—Ä—ã–µ): {result.raw_detected}\n"
                message += f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {result.normalized}\n"
                message += f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ/—Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {result.resolved}\n"
                message += f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –≤ –±–∞–∑–µ: {len(holdings)}\n\n"

                if result.positions:
                    message += "**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**\n"
                    for pos in result.positions:
                        message += f"‚Ä¢ {pos['name']}"
                        if pos['ticker']:
                            message += f" ({pos['ticker']})"
                        message += "\n"
                
                await processing_msg.edit_text(message, parse_mode='Markdown')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                if context.user_data.get('auto_analysis'):
                    if processing_msg.text != "‚úÖ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...":
                        await processing_msg.edit_text("‚úÖ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º analysis_handler –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                    from bot.handlers.analysis import analysis_handler
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    await analysis_handler.handle_analysis_command(update, context)
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
                    context.user_data.pop('waiting_for_photo', None)
                    context.user_data.pop('photo_prompt_message_id', None)
                    context.user_data.pop('auto_analysis', None)
                else:
                    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ waiting_for_photo –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ photo_prompt_message_id
                    context.user_data.pop('photo_prompt_message_id', None)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
                    await update.message.reply_text(
                        "üì∏ –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üìä –ê–Ω–∞–ª–∏–∑' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è."
                    )
            else:
                error_messages = {
                    "not_portfolio": "‚ùå –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ä—Ç—Ñ–µ–ª—å —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥",
                    "no_valid_securities": "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥",
                    "error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                }
                
                error_msg = error_messages.get(result.reason, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await processing_msg.edit_text(error_msg)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ waiting_for_photo, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
                if not context.user_data.get('auto_analysis'):
                    context.user_data.pop('waiting_for_photo', None)
                context.user_data.pop('photo_prompt_message_id', None)
            
        except Exception as e:
            logger.error(f"Failed to handle photo: {e}", exc_info=True)
            try:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            except Exception as send_error:
                logger.error(f"Failed to send error message: {send_error}")
            finally:
                # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ waiting_for_photo –≤ —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if not context.user_data.get('auto_analysis'):
                    context.user_data.pop('waiting_for_photo', None)
                context.user_data.pop('photo_prompt_message_id', None)
    
    async def handle_ticker_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not context.user_data.get('waiting_for_ticker'):
                return
            
            context.user_data['waiting_for_ticker'] = False
            
            ticker = update.message.text.strip().upper()
            
            processing_msg = await update.message.reply_text(f"üîÑ –î–æ–±–∞–≤–ª—è—é {ticker}...")
            
            phone = await self._require_phone(update, context)
            if not phone:
                await processing_msg.edit_text("–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                return

            user = self.db_manager.get_user_by_phone(phone)

            if not user:
                await processing_msg.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            result = await self.ingest_pipeline.add_manual_ticker(user.phone_number, ticker)
            
            if result.reason == "ok":
                message = f"‚úÖ **–¢–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω**\n\n"
                message += f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {result.added}\n"
                message += f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {result.merged}\n"
                
                if result.positions:
                    pos = result.positions[0]
                    message += f"\n**–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:**\n"
                    message += f"‚Ä¢ {pos['name']}"
                    if pos['ticker']:
                        message += f" ({pos['ticker']})"
                    if pos['type']:
                        message += f" - {pos['type']}"
                
                await processing_msg.edit_text(message, parse_mode='Markdown')
            else:
                await processing_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä {ticker}")
            
        except Exception as e:
            logger.error(f"Failed to handle ticker input: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞")
    
    async def handle_back_to_portfolio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            query = update.callback_query
            await query.answer()
            
            await self.show_portfolio_menu(update, context)
            
        except Exception as e:
            logger.error(f"Failed to handle back to portfolio: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")


portfolio_handler = PortfolioHandler()