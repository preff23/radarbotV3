#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ payload –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
"""
import asyncio
import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.db import db_manager, User, PortfolioAccount, PortfolioHoldingV2, PortfolioCashPosition

async def test_ai_payload():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ payload –¥–ª—è AI"""
    print("üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ payload –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            telegram_id=12345,
            first_name="Test",
            last_name="User",
            username="testuser"
        )
        db_manager.db_session.add(test_user)
        db_manager.db_session.commit()
        db_manager.db_session.refresh(test_user)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        test_account = PortfolioAccount(
            user_id=test_user.id,
            account_id="test_account_1",
            account_name="Test Account",
            currency="RUB",
            portfolio_value=1000000.0
        )
        db_manager.db_session.add(test_account)
        db_manager.db_session.commit()
        db_manager.db_session.refresh(test_account)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
        test_bonds = [
            {
                "name": "–ì–∞–∑–ø—Ä–æ–º 001P-05",
                "isin": "RU000A10B2M3",
                "ticker": "RU000A10B2M3",
                "quantity": "100",
                "price": 95.5
            },
            {
                "name": "–°–±–µ—Ä–±–∞–Ω–∫ 001P-06", 
                "isin": "RU000A10ATB6",
                "ticker": "RU000A10ATB6",
                "quantity": "50",
                "price": 98.2
            }
        ]
        
        for bond in test_bonds:
            holding = PortfolioHoldingV2(
                user_id=test_user.id,
                account_internal_id=test_account.id,
                raw_name=bond["name"],
                normalized_name=bond["name"],
                raw_isin=bond["isin"],
                isin=bond["isin"],
                raw_ticker=bond["ticker"],
                ticker=bond["ticker"],
                raw_type="bond",
                security_type="bond",
                raw_quantity=bond["quantity"],
                quantity=float(bond["quantity"])
            )
            db_manager.db_session.add(holding)
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à
        cash = PortfolioCashPosition(
            user_id=test_user.id,
            account_internal_id=test_account.id,
            raw_name="–†—É–±–ª—å",
            amount=50000.0,
            currency="RUB"
        )
        db_manager.db_session.add(cash)
        db_manager.db_session.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analyzer = PortfolioAnalyzer()
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        result = await analyzer.run_analysis(test_user.id)
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('summary', '–ù–µ—Ç summary')[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã–µ
        if 'macro_data' in result:
            print(f"‚úÖ –ú–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã–µ: {result['macro_data']}")
        else:
            print("‚ùå –ú–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        if 'bond_calendar' in result:
            print(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–ª–∏–≥–∞—Ü–∏–π: {len(result['bond_calendar'])} —Å–æ–±—ã—Ç–∏–π")
        else:
            print("‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–ª–∏–≥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        if 'news' in result:
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏: {len(result['news'])} —Å—Ç–∞—Ç–µ–π")
        else:
            print("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        if 'payment_history' in result:
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {len(result['payment_history'])} –∑–∞–ø–∏—Å–µ–π")
        else:
            print("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        if 'positions' in result:
            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏–∏: {len(result['positions'])} –ø–æ–∑–∏—Ü–∏–π")
            for pos in result['positions'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"   - {pos.get('name', 'N/A')}: {pos.get('last_price', 'N/A')} {pos.get('currency', 'N/A')}")
        else:
            print("‚ùå –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_ai_payload())
