#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.core.logging import setup_logging, get_logger
from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.db import db_manager, create_tables

setup_logging()
logger = get_logger(__name__)

async def test_full_analysis():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–û–†–¢–§–ï–õ–Ø")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 999999
        test_phone = "+79999999999"
        
        print(f"üì± –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_phone}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            db_manager.delete_user(test_user_id)
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = db_manager.SessionLocal()
        try:
            user = db_manager.create_user(
                telegram_id=test_user_id,
                phone_number=test_phone,
                username="test_user"
            )
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = db_manager.get_or_create_account(
                user_id=user.id,
                account_id="test_account_1",
                account_name="–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç",
                portfolio_value=1000000.0,
                session=session
            )
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account.id}")
        finally:
            session.close()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π
        test_bonds = [
            {"isin": "RU000A10C9Z9", "name": "–†—É—Å–ì–∏–¥—Ä–æ –ë–û-–ü13", "quantity": 1000, "price": 1000.0},
            {"isin": "RU000A10B2M3", "name": "–°–±–µ—Ä –ë–û-001–†-09", "quantity": 500, "price": 1000.0},
            {"isin": "RU000A10BRN3", "name": "–ì–∞–∑–ø—Ä–æ–º –ë–û-001–†-09", "quantity": 200, "price": 1000.0},
            {"isin": "RU000A10CTH9", "name": "–õ—É–∫–æ–π–ª –ë–û-001–†-09", "quantity": 300, "price": 1000.0},
            {"isin": "RU000A10AHB1", "name": "–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –Ω–∏–∫–µ–ª—å –ë–û-001–†-09", "quantity": 150, "price": 1000.0},
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
        session = db_manager.SessionLocal()
        try:
            print(f"üìä –°–æ–∑–¥–∞–µ–º {len(test_bonds)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ–±–ª–∏–≥–∞—Ü–∏–π...")
            
            for bond in test_bonds:
                holding = db_manager.add_holding(
                    user_id=user.id,
                    raw_name=bond["name"],
                    normalized_name=bond["name"],
                    normalized_key=bond["name"],
                    account_internal_id=account.id,
                    raw_isin=bond["isin"],
                    isin=bond["isin"],
                    raw_quantity=bond["quantity"],
                    raw_type="bond",
                    session=session
                )
                print(f"  ‚úÖ {bond['name']} ({bond['isin']})")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ü–∏–π
            test_shares = [
                {"ticker": "SBER", "name": "–°–±–µ—Ä–±–∞–Ω–∫", "quantity": 100, "price": 250.0},
                {"ticker": "GAZP", "name": "–ì–∞–∑–ø—Ä–æ–º", "quantity": 50, "price": 150.0},
            ]
            
            print(f"üìà –°–æ–∑–¥–∞–µ–º {len(test_shares)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ü–∏–π...")
            
            for share in test_shares:
                holding = db_manager.add_holding(
                    user_id=user.id,
                    raw_name=share["name"],
                    normalized_name=share["name"],
                    normalized_key=share["name"],
                    account_internal_id=account.id,
                    raw_ticker=share["ticker"],
                    ticker=share["ticker"],
                    raw_quantity=share["quantity"],
                    raw_type="share",
                    session=session
                )
                print(f"  ‚úÖ {share['name']} ({share['ticker']})")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            cash_positions = [
                {"currency": "RUB", "amount": 50000.0},
                {"currency": "USD", "amount": 1000.0},
            ]
            
            print(f"üí∞ –°–æ–∑–¥–∞–µ–º {len(cash_positions)} –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            
            for cash in cash_positions:
                from bot.core.db import PortfolioCashPosition
                cash_position = PortfolioCashPosition(
                    user_id=user.id,
                    account_internal_id=account.id,
                    raw_name=f"Cash {cash['currency']}",
                    currency=cash["currency"],
                    amount=cash["amount"]
                )
                session.add(cash_position)
                print(f"  ‚úÖ {cash['amount']} {cash['currency']}")
            
            session.commit()
        finally:
            session.close()
        
        print("\nüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó...")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        start_time = time.time()
        
        analyzer = PortfolioAnalyzer()
        result = await analyzer.run_analysis(user.id)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ó–ê {duration:.2f} –°–ï–ö–£–ù–î")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "error" in result:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
            return False
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(result)} –∫–ª—é—á–µ–π:")
        for key in result.keys():
            print(f"  - {key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if "ai_analysis" in result:
            print(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑: {len(result['ai_analysis'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if "bond_calendar" in result:
            print(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {len(result['bond_calendar'])} —Å–æ–±—ã—Ç–∏–π")
        
        if "news" in result:
            print(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏: {len(result['news'])} —Å—Ç–∞—Ç–µ–π")
        
        if "metrics" in result:
            print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {len(result['metrics'])} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        
        print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        logger.error(f"Test error: {e}", exc_info=True)
        return False
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            db_manager.delete_user(test_user_id)
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except:
            pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    create_tables()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...")
    success = await test_full_analysis()
    
    if success:
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
