#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–ø–ª–∞—Ç –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π
"""
import asyncio
import sys
import os
sys.path.insert(0, os.path.abspath('.'))

from bot.providers.aggregator import MarketDataAggregator
from bot.providers.moex_iss.client import MOEXISSClient
from bot.core.config import config

async def test_calendar():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–ø–ª–∞—Ç...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ ISIN –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    test_bonds = [
        "RU000A10B2M3",  # –ë–î–µ–Ω—å–≥-2P8
        "RU000A105SK4",  # –†–æ–¥–µ–ª–µ–Ω1P4
        "RU000A107PW1",  # –ë–î–µ–Ω—å–≥-2P5
        "RU000A1082K7",  # –í–≠–ë–ë–ù–ö–† 06
        "RU000A10CKZ0",  # –ï–≤—Ä–•–æ–ª3P04
        "RU000A109K40",  # –§–æ—Å–ê–≥—Ä–æ –ü2
        "RU000A10BL99",  # –°–±–µ—Ä SbD6R
        "RU000A10CT33",  # –ê—Ç–æ–º—ç–Ω–ø—Ä08
        "RU000A104B46",  # –ì–ü–ë001P21P
        "RU000A106P97",  # s–°–û–ü–§–î–û–ú6
    ]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π:")
    for bond in test_bonds:
        print(f"  - {bond}")
    
    print("\n" + "="*60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ MOEX
    print("üåê –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ MOEX ISS...")
    moex_client = MOEXISSClient()
    
    for i, bond in enumerate(test_bonds[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {bond} ({i+1}/3):")
        try:
            calendar = await moex_client.get_bond_calendar(bond, days_ahead=30)
            if calendar:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                print(f"  üìÖ –ö—É–ø–æ–Ω–æ–≤: {len(calendar.coupons)}")
                print(f"  üè¶ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π: {len(calendar.amortizations)}")
                
                if calendar.coupons:
                    print(f"  üí∞ –ë–ª–∏–∂–∞–π—à–∏–µ –∫—É–ø–æ–Ω—ã:")
                    for coupon in calendar.coupons[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"    - {coupon.coupon_date.strftime('%d.%m.%Y')}: {coupon.coupon_value} ‚ÇΩ")
                else:
                    print(f"  ‚ùå –ö—É–ø–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            else:
                print(f"  ‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*60)
    
    # –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ MarketDataAggregator
    print("üîÑ –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ MarketDataAggregator...")
    aggregator = MarketDataAggregator()
    
    for i, bond in enumerate(test_bonds[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {bond} —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä ({i+1}/3):")
        try:
            calendar_data = await aggregator.get_bond_calendar(bond)
            if calendar_data:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                print(f"  üìÖ –ö—É–ø–æ–Ω–æ–≤: {len(calendar_data.get('coupons', []))}")
                print(f"  üè¶ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π: {len(calendar_data.get('amortizations', []))}")
                
                coupons = calendar_data.get('coupons', [])
                if coupons:
                    print(f"  üí∞ –ë–ª–∏–∂–∞–π—à–∏–µ –∫—É–ø–æ–Ω—ã:")
                    for coupon in coupons[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        date_str = coupon['date'].strftime('%d.%m.%Y') if hasattr(coupon['date'], 'strftime') else str(coupon['date'])
                        print(f"    - {date_str}: {coupon['value']} ‚ÇΩ")
                else:
                    print(f"  ‚ùå –ö—É–ø–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            else:
                print(f"  ‚ùå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_calendar())
