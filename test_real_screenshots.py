#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
"""

import asyncio
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.core.logging import setup_logging, get_logger
from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.db import db_manager, create_tables
from bot.pipeline.portfolio_ingest_pipeline import PortfolioIngestPipeline

setup_logging()
logger = get_logger(__name__)

async def test_real_screenshots():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏"""
    print("üß™ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–ö–†–ò–ù–®–û–¢–ê–ú–ò")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 888888
        test_phone = "+78888888888"
        
        print(f"üì± –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_phone}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            db_manager.delete_user(test_user_id)
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = db_manager.SessionLocal()
        try:
            user = db_manager.create_user(
                telegram_id=test_user_id,
                phone_number=test_phone,
                username="test_screenshots_user"
            )
            user_id = user.id
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = db_manager.get_or_create_account(
                user_id=user_id,
                account_id="test_screenshots_account",
                account_name="–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã)",
                portfolio_value=0.0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ OCR
                session=session
            )
            account_id = account.id
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account_id}")
        finally:
            session.close()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OCR –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
        print("\nüì∏ –¢–ï–°–¢–ò–†–£–ï–ú OCR –ù–ê –†–ï–ê–õ–¨–ù–´–• –°–ö–†–ò–ù–®–û–¢–ê–•...")
        print("=" * 60)
        
        pipeline = PortfolioIngestPipeline()
        
        # –¢–µ—Å—Ç 1: test4.jpeg
        print("\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º test4.jpeg...")
        start_time = time.time()
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open("/home/ubuntu/radarbotV3/photo/test4.jpeg", "rb") as f:
                image_bytes = f.read()
            
            ocr_result = await pipeline.ingest_from_photo(
                phone_number=test_phone,
                image_bytes=image_bytes
            )
            
            ocr_duration = time.time() - start_time
            print(f"‚úÖ OCR test4.jpeg –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {ocr_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            if ocr_result and ocr_result.positions:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(ocr_result.positions)} –ø–æ–∑–∏—Ü–∏–π")
                print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ: {ocr_result.added}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {ocr_result.merged}")
            else:
                print("‚ùå OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ test4.jpeg")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR test4.jpeg: {e}")
            ocr_result = None
        
        # –¢–µ—Å—Ç 2: test5.jpeg
        print("\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º test5.jpeg...")
        start_time = time.time()
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open("/home/ubuntu/radarbotV3/photo/test5.jpeg", "rb") as f:
                image_bytes2 = f.read()
            
            ocr_result2 = await pipeline.ingest_from_photo(
                phone_number=test_phone,
                image_bytes=image_bytes2
            )
            
            ocr_duration = time.time() - start_time
            print(f"‚úÖ OCR test5.jpeg –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {ocr_duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            if ocr_result2 and ocr_result2.positions:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(ocr_result2.positions)} –ø–æ–∑–∏—Ü–∏–π")
                print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ: {ocr_result2.added}, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {ocr_result2.merged}")
            else:
                print("‚ùå OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ test5.jpeg")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR test5.jpeg: {e}")
            ocr_result2 = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        holdings = db_manager.get_user_holdings(user_id)
        print(f"\nüìà –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {len(holdings)}")
        
        if not holdings:
            print("‚ùå –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. OCR –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
        print("\nüìã –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
        for i, holding in enumerate(holdings[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  {i+1}. {holding.normalized_name} - {holding.raw_quantity} —à—Ç.")
        
        if len(holdings) > 10:
            print(f"  ... –∏ –µ—â–µ {len(holdings) - 10} –ø–æ–∑–∏—Ü–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\nüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–†–¢–§–ï–õ–Ø...")
        print("=" * 60)
        
        start_time = time.time()
        
        analyzer = PortfolioAnalyzer()
        result = await analyzer.run_analysis(user_id)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚è±Ô∏è –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ó–ê {duration:.2f} –°–ï–ö–£–ù–î")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "error" in result:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {result['error']}")
            return False
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(result)} –∫–ª—é—á–µ–π:")
        for key in result.keys():
            print(f"  - {key}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if "ai_analysis" in result:
            print(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑: {len(result['ai_analysis'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if "bond_calendar" in result:
            print(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {len(result['bond_calendar'])} —Å–æ–±—ã—Ç–∏–π")
        
        if "news" in result:
            print(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏: {len(result['news'])} —Å—Ç–∞—Ç–µ–π")
        
        if "metrics" in result:
            print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {len(result['metrics'])} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π AI –∞–Ω–∞–ª–∏–∑
        if "ai_analysis" in result and result["ai_analysis"]:
            print(f"\nü§ñ –ö–†–ê–¢–ö–ò–ô AI –ê–ù–ê–õ–ò–ó:")
            print("-" * 40)
            ai_text = result["ai_analysis"]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            preview = ai_text[:500] + "..." if len(ai_text) > 500 else ai_text
            print(preview)
        
        print(f"\nüéâ –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–ö–†–ò–ù–®–û–¢–ê–ú–ò –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –ü–æ–∑–∏—Ü–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(holdings)}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        logger.error(f"Test error: {e}", exc_info=True)
        return False
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            db_manager.delete_user(test_user_id)
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        except:
            pass

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    create_tables()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏...")
    success = await test_real_screenshots()
    
    if success:
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–ö–†–ò–ù–®–û–¢–ê–ú–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–ö–†–ò–ù–®–û–¢–ê–ú–ò –ù–ï –ü–†–û–®–õ–ò!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
