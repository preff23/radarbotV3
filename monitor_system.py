#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.core.logging import setup_logging, get_logger
from bot.core.health_monitor import health_monitor, HealthStatus

setup_logging()
logger = get_logger(__name__)


def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê RADARBOT 3.0")
    print("=" * 60)
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 60)


def get_status_emoji(status: HealthStatus) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    if status == HealthStatus.HEALTHY:
        return "‚úÖ"
    elif status == HealthStatus.WARNING:
        return "‚ö†Ô∏è"
    elif status == HealthStatus.CRITICAL:
        return "‚ùå"
    else:
        return "‚ùì"


def format_uptime(uptime_seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
    hours = int(uptime_seconds // 3600)
    minutes = int((uptime_seconds % 3600) // 60)
    seconds = int(uptime_seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"


async def display_health_status():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health = await health_monitor.get_system_health(force_check=True)
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print_header()
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall_emoji = get_status_emoji(health.overall_status)
        uptime_str = format_uptime(health.uptime)
        
        print(f"\nüìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {overall_emoji} {health.overall_status.value.upper()}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}")
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time.strftime('%H:%M:%S', time.localtime(health.timestamp))}")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print(f"\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´ ({len(health.components)}):")
        print("-" * 60)
        
        for component in health.components:
            emoji = get_status_emoji(component.status)
            response_time = f" ({component.response_time:.2f}s)" if component.response_time else ""
            
            print(f"{emoji} {component.name.upper()}: {component.status.value}")
            print(f"   üìù {component.message}{response_time}")
            
            if component.details:
                for key, value in component.details.items():
                    print(f"   üìä {key}: {value}")
            print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 30)
        
        critical_components = [c for c in health.components if c.status == HealthStatus.CRITICAL]
        warning_components = [c for c in health.components if c.status == HealthStatus.WARNING]
        
        if critical_components:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for comp in critical_components:
                print(f"   ‚Ä¢ {comp.name}: {comp.message}")
        
        if warning_components:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for comp in warning_components:
                print(f"   ‚Ä¢ {comp.name}: {comp.message}")
        
        if not critical_components and not warning_components:
            print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        
        return health.overall_status
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return HealthStatus.CRITICAL


async def monitor_loop(interval: int = 30):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        while True:
            status = await display_health_status()
            
            # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫
            if status == HealthStatus.CRITICAL:
                print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(10)
            else:
                print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(interval)
                
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


async def quick_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    health = await health_monitor.get_system_health(force_check=True)
    
    print(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {get_status_emoji(health.overall_status)} {health.overall_status.value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_uptime(health.uptime)}")
    print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(health.components)}")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for component in health.components:
        emoji = get_status_emoji(component.status)
        print(f"  {emoji} {component.name}: {component.message}")


async def show_metrics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –ú–ï–¢–†–ò–ö–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    try:
        from bot.utils.ocr_cache import ocr_cache
        from bot.core.error_handler import error_handler
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
        cache_stats = ocr_cache.get_stats()
        print(f"üóÑÔ∏è OCR Cache:")
        print(f"   –†–∞–∑–º–µ—Ä: {cache_stats['cache_size']}/{cache_stats['max_size']}")
        print(f"   Hit Rate: {cache_stats['hit_rate']}%")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {cache_stats['total_requests']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
        error_stats = error_handler.get_error_stats()
        print(f"\nüö® –û—à–∏–±–∫–∏:")
        print(f"   –í—Å–µ–≥–æ: {error_stats['total_errors']}")
        print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(error_stats['categories'])}")
        print(f"   –£—Ä–æ–≤–Ω–∏: {', '.join(error_stats['severities'])}")
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        uptime = health_monitor.get_uptime()
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_uptime(uptime)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    print("üîç –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê RADARBOT 3.0")
    print("=" * 50)
    print()
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python monitor_system.py [–∫–æ–º–∞–Ω–¥–∞]")
    print()
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  monitor     - –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("  check       - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("  metrics     - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    print("  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print()
    print("–ü—Ä–∏–º–µ—Ä—ã:")
    print("  python monitor_system.py monitor")
    print("  python monitor_system.py check")
    print("  python monitor_system.py metrics")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "check":
            await quick_check()
        elif command == "metrics":
            await show_metrics()
        elif command == "help":
            show_help()
        elif command == "monitor":
            await monitor_loop()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            show_help()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await monitor_loop()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
