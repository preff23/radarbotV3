#!/usr/bin/env python3
"""
–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
"""
import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.db import db_manager, User

async def test_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ü–æ—à–∞–≥–æ–≤—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        session = db_manager.SessionLocal()
        users = session.query(User).limit(1).all()
        session.close()
        
        if not users:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        test_user = users[0]
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {test_user.id}")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        print("üìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        analyzer = PortfolioAnalyzer()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–æ–ª–¥–∏–Ω–≥–∏
        print("üìã –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ö–æ–ª–¥–∏–Ω–≥–æ–≤...")
        holdings = await analyzer._load_user_holdings(test_user.id)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(holdings)} —Ö–æ–ª–¥–∏–Ω–≥–æ–≤")
        
        # –®–∞–≥ 4: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        print("üìã –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        accounts = await analyzer._load_user_accounts(test_user.id)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –®–∞–≥ 5: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å
        print("üìã –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏...")
        cash_map = await analyzer._load_account_cash(test_user.id, accounts)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è {len(cash_map)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –®–∞–≥ 6: –†–∞–∑–¥–µ–ª—è–µ–º —Ö–æ–ª–¥–∏–Ω–≥–∏
        print("üìã –®–∞–≥ 6: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ö–æ–ª–¥–∏–Ω–≥–æ–≤...")
        bond_holdings = [h for h in holdings if h.security_type == "bond"]
        share_holdings = [h for h in holdings if h.security_type == "share"]
        print(f"‚úÖ –û–±–ª–∏–≥–∞—Ü–∏–∏: {len(bond_holdings)}, –ê–∫—Ü–∏–∏: {len(share_holdings)}")
        
        # –®–∞–≥ 7: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–π
        print("üìã –®–∞–≥ 7: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π...")
        start_time = datetime.now()
        integrated_bond_data = await analyzer._get_integrated_bond_data(bond_holdings)
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫: {len(integrated_bond_data)}")
        
        # –®–∞–≥ 8: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π
        print("üìã –®–∞–≥ 8: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π...")
        start_time = datetime.now()
        share_snapshots = await analyzer._get_market_data(share_holdings)
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {duration:.2f} —Å–µ–∫: {len(share_snapshots)}")
        
        print("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_step_by_step())
