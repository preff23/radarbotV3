#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.db import db_manager

async def test_analysis_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ SQL
        from sqlalchemy import text
        with db_manager.SessionLocal() as session:
            result = session.execute(text("SELECT * FROM users LIMIT 1"))
            user_row = result.fetchone()
            if not user_row:
                print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from bot.core.db import User
            test_user = User(
                id=user_row[0],
                telegram_id=user_row[3],
                first_name=user_row[4],
                last_name=user_row[5],
                username=user_row[6]
            )
        print(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_user.first_name} {test_user.last_name} (ID: {test_user.id})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analyzer = PortfolioAnalyzer()
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        result = await analyzer.run_analysis(test_user.id)
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
            return False
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        if 'ai_analysis' in result:
            ai_text = result['ai_analysis']
            print(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑: {len(ai_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìù –ü—Ä–µ–≤—å—é: {ai_text[:200]}...")
        else:
            print("‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_analysis_generation())