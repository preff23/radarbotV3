#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–ø–ª–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/goretofff/Desktop/radar3.0')

from bot.providers.moex_iss.client import MOEXISSClient
from bot.providers.aggregator import MarketDataAggregator
from bot.core.logging import get_logger

logger = get_logger(__name__)

async def test_calendar_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–ø–ª–∞—Ç –Ω–∞–ø—Ä—è–º—É—é"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–ø–ª–∞—Ç –Ω–∞–ø—Ä—è–º—É—é...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã
    test_bonds = [
        "RU000A10B2M3",  # –ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ –ú–§–ö
        "RU000A105SK4",  # –†–æ–¥–µ–ª–µ–Ω –õ–ö
        "RU000A10CT33",  # –ê—Ç–æ–º—ç–Ω–µ—Ä–≥–æ–ø—Ä–æ–º
        "RU000A104B46",  # –ë–∞–Ω–∫ –ì–ü–ë
        "RU000A106P97",  # –°–û–ü–§ –î–û–ú.–†–§
    ]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π:")
    for bond in test_bonds:
        print(f"  - {bond}")
    
    print("\n" + "="*60)
    print("üåê –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ MOEX ISS...")
    
    moex_client = MOEXISSClient()
    
    for i, secid in enumerate(test_bonds):
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {secid} ({i+1}/{len(test_bonds)}):")
        try:
            calendar = await moex_client.get_bond_calendar(secid, days_ahead=365)
            if calendar:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                print(f"  üìÖ –ö—É–ø–æ–Ω–æ–≤: {len(calendar.coupons)}")
                print(f"  üè¶ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π: {len(calendar.amortizations)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è
                from datetime import datetime
                upcoming_coupons = [c for c in calendar.coupons if c.coupon_date >= datetime.now()]
                if upcoming_coupons:
                    print("  üí∞ –ë–ª–∏–∂–∞–π—à–∏–µ –∫—É–ø–æ–Ω—ã:")
                    for coupon in sorted(upcoming_coupons, key=lambda x: x.coupon_date)[:3]:
                        print(f"    - {coupon.coupon_date.strftime('%d.%m.%Y')}: {coupon.coupon_value} ‚ÇΩ")
                else:
                    print("  ‚ùå –ö—É–ø–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*60)
    print("üîÑ –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ MarketDataAggregator...")
    
    market_aggregator = MarketDataAggregator()
    
    for i, secid in enumerate(test_bonds):
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {secid} —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä ({i+1}/{len(test_bonds)}):")
        try:
            calendar_data = await market_aggregator.get_bond_calendar(secid)
            if calendar_data:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
                print(f"  üìÖ –ö—É–ø–æ–Ω–æ–≤: {len(calendar_data.get('coupons', []))}")
                print(f"  üè¶ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–π: {len(calendar_data.get('amortizations', []))}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è
                from datetime import datetime
                upcoming_coupons = [c for c in calendar_data.get('coupons', []) if c.get('date') and c['date'] >= datetime.now()]
                if upcoming_coupons:
                    print("  üí∞ –ë–ª–∏–∂–∞–π—à–∏–µ –∫—É–ø–æ–Ω—ã:")
                    for coupon in sorted(upcoming_coupons, key=lambda x: x['date'])[:3]:
                        print(f"    - {coupon['date'].strftime('%d.%m.%Y')}: {coupon['value']} ‚ÇΩ")
                else:
                    print("  ‚ùå –ö—É–ø–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_calendar_direct())
