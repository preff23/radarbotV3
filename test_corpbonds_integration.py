#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ corpbonds.ru
"""

import asyncio
import json
from bot.services.corpbonds_service import corpbonds_service


async def test_corpbonds_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å corpbonds.ru"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ corpbonds.ru...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ ISIN –æ–±–ª–∏–≥–∞—Ü–∏–π
    test_isins = [
        "RU000A10BNF8",  # –†—É—Å–ì–∏–¥—Ä–æ –ë–û-–ü13
        "RU000A1082X0",  # –ì—Ä—É–ø–ø–∞ –õ–°–† –ü–ê–û –ë–û 001–†-09
    ]
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    print("\nüìã –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏")
    print("-" * 40)
    
    bond_data = await corpbonds_service.get_bond_data(test_isins[0])
    
    if "error" in bond_data:
        print(f"‚ùå –û—à–∏–±–∫–∞: {bond_data['error']}")
    else:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {test_isins[0]}")
        summary = corpbonds_service.extract_bond_summary(bond_data)
        print(f"üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: {json.dumps(summary, ensure_ascii=False, indent=2)}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
    print("\nüìã –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π")
    print("-" * 40)
    
    multiple_data = await corpbonds_service.get_multiple_bonds_data(test_isins)
    
    successful_count = sum(1 for data in multiple_data.values() if "error" not in data)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {successful_count}/{len(test_isins)} –æ–±–ª–∏–≥–∞—Ü–∏–π")
    
    for isin, data in multiple_data.items():
        if "error" in data:
            print(f"‚ùå {isin}: {data['error']}")
        else:
            summary = corpbonds_service.extract_bond_summary(data)
            print(f"‚úÖ {isin}: {summary.get('name', 'N/A')}")
    
    # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è AI
    print("\nüìã –¢–ï–°–¢ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
    print("-" * 40)
    
    formatted_data = corpbonds_service.format_for_ai_analysis(multiple_data)
    print("üìÑ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(formatted_data[:500] + "..." if len(formatted_data) > 500 else formatted_data)
    
    # –¢–µ—Å—Ç 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("-" * 40)
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    start_time = asyncio.get_event_loop().time()
    await corpbonds_service.get_bond_data(test_isins[0])
    first_time = asyncio.get_event_loop().time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
    start_time = asyncio.get_event_loop().time()
    await corpbonds_service.get_bond_data(test_isins[0])
    second_time = asyncio.get_event_loop().time() - start_time
    
    print(f"‚è±Ô∏è –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_time:.3f} —Å–µ–∫")
    print(f"‚è±Ô∏è –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∫—ç—à): {second_time:.3f} —Å–µ–∫")
    print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_time/second_time:.1f}x")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã API
    from bot.api.corpbonds_endpoints import get_bond_data, get_multiple_bonds_data
    
    # –¢–µ—Å—Ç API –¥–ª—è –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    print("\nüìã –¢–ï–°–¢ API: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏")
    print("-" * 40)
    
    try:
        response = await get_bond_data("RU000A10BNF8")
        print(f"‚úÖ API Response: {response.success}")
        if response.success:
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {response.data.get('name', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.error}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    
    print("\n‚úÖ API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await test_corpbonds_service()
        await test_api_endpoints()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
