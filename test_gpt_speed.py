#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API —á–µ—Ä–µ–∑ NeuroAPI
"""
import asyncio
import os
import sys
import time
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from openai import AsyncOpenAI

async def test_gpt_speed():
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API"""
    print("üîç –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ GPT API —á–µ—Ä–µ–∑ NeuroAPI...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        client = AsyncOpenAI(
            api_key=os.getenv("OPENAI_API_KEY"),
            base_url="https://neuroapi.host/v1"
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        print("üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
        start_time = time.time()
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π."},
                {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ 3 –æ–±–ª–∏–≥–∞—Ü–∏–π: –ê, –ë, –í. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."}
            ],
            max_tokens=500
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:100]}...")
        
        # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
        print("\nüìã –¢–µ—Å—Ç 2: –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç...")
        start_time = time.time()
        
        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        with open("bot/ai/prompts/portfolio_analyze_v14.txt", 'r', encoding='utf-8') as f:
            system_prompt = f.read()
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_data = {
            "positions": [
                {
                    "name": f"–û–±–ª–∏–≥–∞—Ü–∏—è {i}",
                    "ticker": f"BOND{i:03d}",
                    "isin": f"RU000A{i:010d}",
                    "type": "bond",
                    "price": 100.0 + i,
                    "ytm": 10.0 + i,
                    "quantity": 10 + i,
                    "value": (100.0 + i) * (10 + i)
                }
                for i in range(20)  # 20 –æ–±–ª–∏–≥–∞—Ü–∏–π
            ],
            "total_value": 50000.0,
            "bond_count": 20,
            "share_count": 0,
            "accounts": [],
            "macro_data": {
                "timestamp": "2024-10-03 15:40:00 –ú–°–ö",
                "usd_rub": "USD/RUB: 95.50",
                "imoex": "IMOEX: 2800"
            },
            "news": [
                {"title": f"–ù–æ–≤–æ—Å—Ç—å {i}", "description": f"–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ {i}"}
                for i in range(10)  # 10 –Ω–æ–≤–æ—Å—Ç–µ–π
            ],
            "bond_calendar": [
                {"date": f"2024-10-{i+1:02d}", "event": f"–°–æ–±—ã—Ç–∏–µ {i}"}
                for i in range(15)  # 15 —Å–æ–±—ã—Ç–∏–π
            ]
        }
        
        user_message = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–æ–º–ø—Ç—É v14.5.

–ú–ê–ö–†–û-–î–ê–ù–ù–´–ï:
- –í—Ä–µ–º—è: {portfolio_data['macro_data']['timestamp']}
- USD/RUB: {portfolio_data['macro_data']['usd_rub']}
- IMOEX: {portfolio_data['macro_data']['imoex']}

–î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:
{portfolio_data}

–î–∞–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
"""
        
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=2000
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:200]}...")
        
        # –¢–µ—Å—Ç —Å gpt-4o (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        print("\nüìã –¢–µ—Å—Ç 3: GPT-4o (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)...")
        try:
            start_time = time.time()
            
            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π."},
                    {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ 3 –æ–±–ª–∏–≥–∞—Ü–∏–π: –ê, –ë, –í. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."}
                ],
                max_tokens=500
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"‚úÖ GPT-4o: {duration:.2f} —Å–µ–∫")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:100]}...")
            
        except Exception as e:
            print(f"‚ùå GPT-4o –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_gpt_speed())
