#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.core.logging import setup_logging, get_logger
from bot.core.health_monitor import health_monitor
from bot.utils.ocr_cache import ocr_cache
from bot.core.error_handler import error_handler

setup_logging()
logger = get_logger(__name__)


async def test_ocr_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—ç—à OCR"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR Cache...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        stats = ocr_cache.get_stats()
        print(f"   ‚úÖ Cache stats: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
        ocr_cache.clear()
        stats_after = ocr_cache.get_stats()
        print(f"   ‚úÖ Cache cleared: {stats_after}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå OCR Cache test failed: {e}")
        return False


async def test_error_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Error Handler...")
    
    try:
        from bot.core.error_handler import ErrorSeverity, ErrorCategory, ErrorContext
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
        test_error = ValueError("Test error")
        error_info = error_handler.handle_error(
            test_error,
            severity=ErrorSeverity.LOW,
            category=ErrorCategory.BUSINESS_LOGIC,
            context=ErrorContext(operation="test")
        )
        
        print(f"   ‚úÖ Error handled: {error_info.message}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        stats = error_handler.get_error_stats()
        print(f"   ‚úÖ Error stats: {stats}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Error Handler test failed: {e}")
        return False


async def test_health_monitor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Monitor...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health = await health_monitor.get_system_health(force_check=True)
        print(f"   ‚úÖ System health: {health.overall_status.value}")
        print(f"   ‚úÖ Components checked: {len(health.components)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        db_health = await health_monitor.check_database_health()
        print(f"   ‚úÖ Database: {db_health.status.value}")
        
        cache_health = await health_monitor.check_cache_health()
        print(f"   ‚úÖ Cache: {cache_health.status.value}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Health Monitor test failed: {e}")
        return False


async def test_corpbonds_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å corpbonds.ru"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CorpBonds Integration...")
    
    try:
        from bot.services.corpbonds_service import corpbonds_service
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–∏
        test_isin = "RU000A10BNF8"  # –†—É—Å–ì–∏–¥—Ä–æ
        bond_data = await corpbonds_service.get_bond_data(test_isin)
        
        if "error" in bond_data:
            print(f"   ‚ö†Ô∏è Bond data error: {bond_data['error']}")
        else:
            print(f"   ‚úÖ Bond data retrieved: {bond_data.get('name', 'Unknown')}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå CorpBonds test failed: {e}")
        return False


async def test_smart_data_loader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Data Loader...")
    
    try:
        from bot.services.smart_data_loader import SmartDataLoader
        from bot.handlers.invest_analyst import invest_analyst
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π loader
        loader = SmartDataLoader(invest_analyst)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç!",
            "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—ã–Ω–∫–µ?",
            "–ö–∞–∫ –¥–µ–ª–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ MOEX?",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"
        ]
        
        for message in test_messages:
            context = await loader.get_smart_context(message, {"holdings": []})
            print(f"   ‚úÖ Message '{message}': {len(context)} data types loaded")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Smart Data Loader test failed: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    tests = [
        ("OCR Cache", test_ocr_cache),
        ("Error Handler", test_error_handler),
        ("Health Monitor", test_health_monitor),
        ("CorpBonds Integration", test_corpbonds_integration),
        ("Smart Data Loader", test_smart_data_loader)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        
        try:
            success = await test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"   ‚ùå {test_name} crashed: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        return False


if __name__ == "__main__":
    try:
        success = asyncio.run(run_all_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
