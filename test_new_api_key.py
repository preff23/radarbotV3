#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ –¥–ª—è gen-api.ru
"""
import asyncio
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.utils.genapi_client import GenAPIClient, GenAPIOpenAIAdapter

async def test_new_api_key():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞"""
    print("üîç –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ –¥–ª—è gen-api.ru...")
    
    # –ù–æ–≤—ã–π API –∫–ª—é—á
    api_key = "sk-3lObctPRQiG7Pal1iDyiwQjdcipcvJRHDqvrbFGTmBeK735FUOS9sFevOBYa"
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API
        print("üìã –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º...")
        client = GenAPIClient(api_key)
        
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π."},
            {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ 3 –æ–±–ª–∏–≥–∞—Ü–∏–π: –ê, –ë, –í. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."}
        ]
        
        start_time = time.time()
        result = await client.chat_completion(messages, max_tokens=500)
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ü—Ä—è–º–æ–π API: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {result[:200]}...")
        
        # –¢–µ—Å—Ç 2: –ê–¥–∞–ø—Ç–µ—Ä OpenAI
        print("\nüìã –¢–µ—Å—Ç 2: –ê–¥–∞–ø—Ç–µ—Ä OpenAI —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º...")
        adapter = GenAPIOpenAIAdapter(api_key)
        
        start_time = time.time()
        response = await adapter.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=500
        )
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä OpenAI: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:200]}...")
        
        # –¢–µ—Å—Ç 3: –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        print("\nüìã –¢–µ—Å—Ç 3: –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        big_messages = [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –æ–±–ª–∏–≥–∞—Ü–∏–π. –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."},
            {"role": "user", "content": f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:

–î–ê–ù–ù–´–ï –ü–û–†–¢–§–ï–õ–Ø:
{{
    "positions": [
        {{"name": "–ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-08", "ticker": "–ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-08", "isin": "RU000A103ZJ0", "type": "bond", "price": 1025.0, "ytm": 10.0, "quantity": 5, "value": 5125.0}},
        {{"name": "–ö–õ–°-–¢—Ä–µ–π–¥ –ë–û-03", "ticker": "–ö–õ–°-–¢—Ä–µ–π–¥ –ë–û-03", "isin": "RU000A0JXTS8", "type": "bond", "price": 237.76, "ytm": 12.0, "quantity": 25, "value": 5944.0}},
        {{"name": "–ü–æ–ª–∏–ø–ª–∞—Å—Ç –ü–û2-–ë–û-11", "ticker": "–ü–æ–ª–∏–ø–ª–∞—Å—Ç –ü–û2-–ë–û-11", "isin": "RU000A10CTH9", "type": "bond", "price": 1133.51, "ytm": 8.0, "quantity": 88, "value": 9999.28}}
    ],
    "total_value": 21068.28,
    "bond_count": 3,
    "share_count": 0,
    "macro_data": {{
        "timestamp": "2024-10-03 16:30:00 –ú–°–ö",
        "usd_rub": "USD/RUB: 95.50",
        "imoex": "IMOEX: 2800"
    }}
}}

–î–∞–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏.
"""}
        ]
        
        start_time = time.time()
        response = await adapter.chat.completions.create(
            model="gpt-4o-mini",
            messages=big_messages,
            max_tokens=3000
        )
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ –ë–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç: {duration:.2f} —Å–µ–∫")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.choices[0].message.content[:400]}...")
        
        print("\nüéâ –ù–æ–≤—ã–π API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_new_api_key())
