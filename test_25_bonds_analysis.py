#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ 25 –æ–±–ª–∏–≥–∞—Ü–∏–π –±–µ–∑ OCR
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.core.db import db_manager, User, PortfolioAccount, PortfolioHoldingV2, PortfolioCashPosition
from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
import time

# –°–ø–∏—Å–æ–∫ 25 —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_BONDS = [
    {"isin": "RU000A10B2M3", "name": "–ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-08", "ticker": "–ë–î–µ–Ω—å–≥-2P8", "quantity": 5.0},
    {"isin": "RU000A10CRC4", "name": "–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –ù–∏–∫–µ–ª—å –ë–û-001–†-14-USD", "ticker": "–ù–æ—Ä–ù–∏–∫1P14", "quantity": 20.0},
    {"isin": "RU000A10ATB6", "name": "–ö–õ–°-–¢—Ä–µ–π–¥ –ë–û-03", "ticker": "K–õC-TPE–ô–î –ëO-03", "quantity": 25.0},
    {"isin": "RU000A107PW1", "name": "–ú–§–ö –ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-05", "ticker": "–ë–î–µ–Ω—å–≥-2P5", "quantity": 5.0},
    {"isin": "RU000A1082K7", "name": "–ú–§–ö –í–≠–ë–ë–ê–ù–ö–ò–† 06", "ticker": "–í–≠–ë–ë–ù–ö–† 06", "quantity": 10.0},
    {"isin": "RU000A10C8H9", "name": "–û–∏–ª –†–µ—Å—É—Ä—Å 001–†-02", "ticker": "–û–∏–ª–†–µ—Å1P2", "quantity": 26.0},
    {"isin": "RU000A108C17", "name": "–ü–ò–† –ë–û-02-001–†", "ticker": "–ü–ò–† 1P2", "quantity": 3.0},
    {"isin": "RU000A10CTH9", "name": "–ü–æ–ª–∏–ø–ª–∞—Å—Ç –ü02-–ë–û-11", "ticker": "–ü–æ–ª–∏–ø–ü2–ë11", "quantity": 88.0},
    {"isin": "RU000A10AHB1", "name": "–†–î–í –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 001–†-01", "ticker": "–ù–æ–≤–¢–µ—Ö1–†1", "quantity": 3.0},
    {"isin": "RU000A109NM3", "name": "–†–ï–ì–ò–û–ù–°–ü–ï–¶–¢–†–ê–ù–°-01", "ticker": "–†–°–¢-01", "quantity": 10.0},
    {"isin": "RU000A10BRN3", "name": "–°–∏–±–∏—Ä—Å–∫–∏–π –ö–•–ü 001–†-04", "ticker": "–°–∏–±–ö–•–ü 1P4", "quantity": 5.0},
    {"isin": "RU000A10C758", "name": "–¢–î –†–ö–° 0662–ü06", "ticker": "–†–ö–°2–†6", "quantity": 15.0},
    {"isin": "RU000A0JVWJ6", "name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ª–∏–∑–∏–Ω–≥ –∫–æ–º–ø 066–ü03", "ticker": "–ì–¢–õ–ö –ë–û-06", "quantity": 8.0},
    {"isin": "RU000A10C9Z9", "name": "–£–ü–¢–ö-65 001–†-01", "ticker": "–£–ü–¢–ö65 1P1", "quantity": 12.0},
    {"isin": "RU000A10ANT1", "name": "–†–î–í –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 001–†-01", "ticker": "–†–î–í –¢–ï–• 01", "quantity": 7.0},
    {"isin": "RU000A10B2M3", "name": "–ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-08", "ticker": "–ë–î–µ–Ω—å–≥-2P8", "quantity": 3.0},
    {"isin": "RU000A10CRC4", "name": "–ù–æ—Ä–∏–ª—å—Å–∫–∏–π –ù–∏–∫–µ–ª—å –ë–û-001–†-14-USD", "ticker": "–ù–æ—Ä–ù–∏–∫1P14", "quantity": 15.0},
    {"isin": "RU000A10ATB6", "name": "–ö–õ–°-–¢—Ä–µ–π–¥ –ë–û-03", "ticker": "K–õC-TPE–ô–î –ëO-03", "quantity": 20.0},
    {"isin": "RU000A107PW1", "name": "–ú–§–ö –ë—ã—Å—Ç—Ä–æ–¥–µ–Ω—å–≥–∏ 002–†-05", "ticker": "–ë–î–µ–Ω—å–≥-2P5", "quantity": 8.0},
    {"isin": "RU000A1082K7", "name": "–ú–§–ö –í–≠–ë–ë–ê–ù–ö–ò–† 06", "ticker": "–í–≠–ë–ë–ù–ö–† 06", "quantity": 12.0},
    {"isin": "RU000A10C8H9", "name": "–û–∏–ª –†–µ—Å—É—Ä—Å 001–†-02", "ticker": "–û–∏–ª–†–µ—Å1P2", "quantity": 18.0},
    {"isin": "RU000A108C17", "name": "–ü–ò–† –ë–û-02-001–†", "ticker": "–ü–ò–† 1P2", "quantity": 6.0},
    {"isin": "RU000A10CTH9", "name": "–ü–æ–ª–∏–ø–ª–∞—Å—Ç –ü02-–ë–û-11", "ticker": "–ü–æ–ª–∏–ø–ü2–ë11", "quantity": 45.0},
    {"isin": "RU000A10AHB1", "name": "–†–î–í –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ 001–†-01", "ticker": "–ù–æ–≤–¢–µ—Ö1–†1", "quantity": 4.0},
    {"isin": "RU000A109NM3", "name": "–†–ï–ì–ò–û–ù–°–ü–ï–¶–¢–†–ê–ù–°-01", "ticker": "–†–°–¢-01", "quantity": 9.0}
]

async def main():
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_phone = "+79999999999"
    test_user = db_manager.create_user(
        telegram_id=999999999,
        phone_number=test_phone,
        first_name="Test",
        last_name="User"
    )
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {test_user.id}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    session = db_manager.SessionLocal()
    try:
        account = db_manager.get_or_create_account(
            user_id=test_user.id,
            account_id="test_account_25_bonds",
            account_name="–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç 25 –æ–±–ª–∏–≥–∞—Ü–∏–π",
            portfolio_value=1000000.0,
            session=session
        )
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º 25 –æ–±–ª–∏–≥–∞—Ü–∏–π
        print(f"üìä –î–æ–±–∞–≤–ª—è–µ–º {len(TEST_BONDS)} –æ–±–ª–∏–≥–∞—Ü–∏–π...")
        for i, bond in enumerate(TEST_BONDS):
            holding = db_manager.add_holding(
                user_id=test_user.id,
                raw_name=bond["name"],
                normalized_name=bond["name"],
                normalized_key=bond["ticker"],
                account_internal_id=account.id,
                raw_isin=bond["isin"],
                isin=bond["isin"],
                raw_ticker=bond["ticker"],
                ticker=bond["ticker"],
                raw_type="–æ–±–ª–∏–≥–∞—Ü–∏—è",
                security_type="bond",
                raw_quantity=bond["quantity"],
                session=session
            )
            print(f"  {i+1:2d}. {bond['ticker']} - {bond['quantity']} —à—Ç.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã—Ö
        cash = PortfolioCashPosition(
            user_id=test_user.id,
            account_internal_id=account.id,
            raw_name="–†—É–±–ª—å",
            amount=50000.0,
            currency="RUB"
        )
        session.add(cash)
        session.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 50,000 ‚ÇΩ –Ω–∞–ª–∏—á–Ω—ã—Ö")
        
    finally:
        session.close()
    
    print(f"\nüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó 25 –û–ë–õ–ò–ì–ê–¶–ò–ô...")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer = PortfolioAnalyzer()
    start_time = time.time()
    
    try:
        analysis_result = await analyzer.run_analysis(test_user.id)
        analysis_duration = time.time() - start_time
        
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ó–ê {analysis_duration:.2f} –°–ï–ö–£–ù–î")
        print("=" * 60)
        
        if "error" in analysis_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result['error']}")
        else:
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"  - –°–≤–æ–¥–∫–∞: {analysis_result.get('summary', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')[:100]}...")
            print(f"  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis_result.get('recommendations', []))} —à—Ç.")
            print(f"  - –†–∏—Å–∫–∏: {len(analysis_result.get('risks', []))} —à—Ç.")
            print(f"  - –ú–µ—Ç—Ä–∏–∫–∏: {len(analysis_result.get('metrics', {}))} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            
    except Exception as e:
        analysis_duration = time.time() - start_time
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê –ó–ê {analysis_duration:.2f} –°–ï–ö–£–ù–î")
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
