#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 28 —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
"""

import asyncio
import sys
import time
import random
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from bot.analytics.portfolio_analyzer import PortfolioAnalyzer
from bot.core.logging import setup_logging, get_logger

setup_logging()
logger = get_logger(__name__)


async def test_28_bonds_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ 28 —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π"""
    print("üß™ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê 28 –°–õ–£–ß–ê–ô–ù–´–• –û–ë–õ–ò–ì–ê–¶–ò–ô")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö ISIN –æ–±–ª–∏–≥–∞—Ü–∏–π
    test_isins = [
        "RU000A10B2M3", "RU000A10CRC4", "RU000A10ATB6", "RU000A107PW1",
        "RU000A1082K7", "RU000A10C8H9", "RU000A108C17", "RU000A10CTH9",
        "RU000A10AHB1", "RU000A109NM3", "RU000A10BRN3", "RU000A10C758",
        "RU000A0JVWJ6", "RU000A10C9Z9", "RU000A10B2M3", "RU000A10CRC4",
        "RU000A10ATB6", "RU000A107PW1", "RU000A1082K7", "RU000A10C8H9",
        "RU000A108C17", "RU000A10CTH9", "RU000A10AHB1", "RU000A109NM3",
        "RU000A10BRN3", "RU000A10C758", "RU000A0JVWJ6", "RU000A10C9Z9"
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è {len(test_isins)} –æ–±–ª–∏–≥–∞—Ü–∏–π")
    print(f"üîó ISIN –æ–±–ª–∏–≥–∞—Ü–∏–π: {', '.join(test_isins[:5])}...")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = PortfolioAnalyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    start_time = time.time()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ–±–ª–∏–≥–∞—Ü–∏–π
        print("üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ–±–ª–∏–≥–∞—Ü–∏–π...")
        from bot.providers.aggregator import market_aggregator
        
        calendar_start = time.time()
        calendar_results = []
        for i, isin in enumerate(test_isins):
            print(f"  üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è {isin} ({i+1}/{len(test_isins)})...")
            calendar = await market_aggregator.get_bond_calendar(isin)
            calendar_results.append(calendar)
            coupons_count = len(calendar.get('coupons', [])) if calendar else 0
            print(f"  ‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è {isin}: {coupons_count} –∫—É–ø–æ–Ω–æ–≤")
        
        calendar_duration = time.time() - calendar_start
        print(f"üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {calendar_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π
        print("üì∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news_start = time.time()
        from bot.sources.news_rss import NewsAggregator
        news_loader = NewsAggregator()
        news = await news_loader.fetch_all_news()
        news_duration = time.time() - news_start
        print(f"üì∞ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {news_duration:.2f} —Å–µ–∫—É–Ω–¥: {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π
        print("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π...")
        bonds_start = time.time()
        from bot.services.corpbonds_service import CorpBondsService
        corpbonds_service = CorpBondsService()
        bonds_data = await corpbonds_service.get_multiple_bonds_data(test_isins)
        bonds_duration = time.time() - bonds_start
        print(f"üîó –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {bonds_duration:.2f} —Å–µ–∫—É–Ω–¥: {len(bonds_data)} –æ–±–ª–∏–≥–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã—Ö
        print("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã—Ö...")
        macro_start = time.time()
        macro_data = await analyzer._get_macro_data()
        macro_duration = time.time() - macro_start
        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–∫—Ä–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {macro_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π...")
        payment_start = time.time()
        from bot.analytics.payment_history import PaymentHistoryAnalyzer
        payment_analyzer = PaymentHistoryAnalyzer()
        
        # –°–æ–∑–¥–∞–µ–º mock snapshots –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        from bot.providers.aggregator import MarketSnapshot
        mock_snapshots = []
        for isin in test_isins:
            snapshot = MarketSnapshot(secid=isin)
            snapshot.security_type = "bond"
            mock_snapshots.append(snapshot)
        
        payment_history = await payment_analyzer.get_payment_history(mock_snapshots)
        payment_duration = time.time() - payment_start
        print(f"üí∞ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {payment_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        total_duration = time.time() - start_time
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –ó–ê {total_duration:.2f} –°–ï–ö–£–ù–î")
        print("=" * 60)
        print(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å ({len(test_isins)} –æ–±–ª–∏–≥–∞—Ü–∏–π): {calendar_duration:.2f}—Å")
        print(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏: {news_duration:.2f}—Å")
        print(f"üîó –û–±–ª–∏–≥–∞—Ü–∏–∏ ({len(test_isins)} –æ–±–ª–∏–≥–∞—Ü–∏–π): {bonds_duration:.2f}—Å")
        print(f"üìà –ú–∞–∫—Ä–æ: {macro_duration:.2f}—Å")
        print(f"üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ({len(test_isins)} –æ–±–ª–∏–≥–∞—Ü–∏–π): {payment_duration:.2f}—Å")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}—Å")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏—é: {total_duration/len(test_isins):.2f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("-" * 40)
        if total_duration > 60:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π (>60 —Å–µ–∫—É–Ω–¥)")
        elif total_duration > 30:
            print("‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –º–µ–¥–ª–µ–Ω–Ω—ã–π (30-60 —Å–µ–∫—É–Ω–¥)")
        else:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –±—ã—Å—Ç—Ä—ã–π (<30 —Å–µ–∫—É–Ω–¥)")
        
        if calendar_duration > 20:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è")
        elif calendar_duration > 10:
            print("‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–µ–¥–ª–µ–Ω–Ω–∞—è")
        else:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—ã—Å—Ç—Ä–∞—è")
        
        if bonds_duration > 20:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è")
        elif bonds_duration > 10:
            print("‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –º–µ–¥–ª–µ–Ω–Ω–∞—è")
        else:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –±—ã—Å—Ç—Ä–∞—è")
        
    except Exception as e:
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥: {e}")
        logger.error(f"28 bonds test failed: {e}", exc_info=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        import traceback
        print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò:")
        print(traceback.format_exc())


if __name__ == "__main__":
    asyncio.run(test_28_bonds_analysis())
